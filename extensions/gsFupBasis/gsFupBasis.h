/** @file gsFupBasis.h

    @brief Provides declaration of FupBasis class

    This file is part of the G+Smo library.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

*/


#pragma once

#include <gsCore/gsForwardDeclarations.h>
#include <gsCore/gsConstantBasis.h>

#include <gsTensor/gsTensorBasis.h>
#include <gsTensor/gsTensorDomainIterator.h>
#include <gsTensor/gsTensorDomainBoundaryIterator.h>

#include <gsNurbs/gsKnotVector.h>

// Start  Fortran declarations
extern "C" double __fup_0_16_d_MOD_fupn(int * deg, double * anchor, double * u,
                                        double * ch_knot_length, int * deriv_order);

extern "C" void __fup_0_16_d_MOD_racun();
// End  Fortran declarations

namespace gismo
{

/// @brief Traits for FupBasis in more dimensions
template<short_t d, class T>
struct gsFupTraits
{
    typedef gsKnotVector<T> KnotVectorType;

    //typedef gsTensorFupBasis<d,T> Basis;
    //typedef gsTensorRatBasis<d,T> RatBasis;
    typedef gsGeometry<T>           Geometry;
    //typedef gsTensorNurbs<d,T>    RatGeometry;
};

/** \brief
    A univariate B-spline basis.

    \tparam T coefficient type
    \tparam KnotVectorType the type of knot vector to use

    \ingroup basis
    \ingroup Nurbs
*/
template<class T>
class gsFupBasis : public gsBasis<T>
{
    mutable index_t m_p;     /// Degree of FUP basis
    gsKnotVector<T> m_knots; /// the knotvector
    mutable T m_knot_length; /// characteristic length
    bool m_openKV;     /// if true the boundary basis functions will be modified
public:
    typedef gsBasis<T> Base;

    typedef gsFupBasis<T> Self_t;

    /// @brief Coefficient type
    typedef T Scalar_t;

    /// @brief Associated geometry type
    //typedef typename gsFupTraits<T>::Geometry GeometryType;

    /// @brief Associated Boundary basis type
    //typedef typename gsFupTraits<T>::Basis BoundaryBasisType;

    /// @brief Dimension of the parameter domain
    static const short_t Dim = 1;

    /// @brief Smart pointer for gsFupBasis
    typedef memory::shared_ptr< Self_t > Ptr;

    /// @brief Smart pointer for gsFupBasis
    typedef memory::unique_ptr< Self_t > uPtr;

public:
    GISMO_CLONE_FUNCTION(gsFupBasis)

    //// Empty constructor (creates an empty basis)
    gsFupBasis()
    {
        m_p = 0;
        m_knots.initClamped(0);
    }

    /// Constructs basis in domain [u0,u1]
    /// \a interior number of interior knots
    /// \a degree   the degree of the basis
    /// \a open   whether the knotvector should be open (modified boundary)
    gsFupBasis(const T u0, const T u1,
               const unsigned interior,
               const int degree, bool open = false)
    : m_openKV(open)
    {
        m_p = degree;
        //m_knots.initUniform(u0, u1, interior, m_p+2, 1, m_p+1); // here there were multiple knots at the ends, not appriate for now
        m_knots.initUniform(u0, u1, interior, 1, 1, m_p+1); //initialize knot vector for degree m_p+1 (to keep analogy with B-Splines)
        m_knot_length = (T)(u1-u0)/(m_knots.numElements()); // compute the characteristic length

        //Precompute values at rational points for degrees 1..16
        __fup_0_16_d_MOD_racun();
    }

private:

    /// Evaluate using fortran code the values of order \a deriv_order at points \a u
    void fupn_eval(const gsMatrix<T> & u, int deriv_order,
                   gsMatrix<T>& result) const
    {
        result.resize(m_p+2, u.cols() );
        index_t act;
        for ( index_t k = 0; k!=u.cols(); ++k)
        {
            act = firstActive(u(0,k)); 
            for ( index_t i = 0; i!=m_p+2; ++i)
            {
                result(i,k) = fupn_eval_single(u(0,k), deriv_order, act++);
            }

        }
        
//More efficient code for later.
//Debug it later!
#if FALSE
        gsVector<T> tmp;
        index_t act, m;
        for ( index_t k = 0; k!=u.cols(); ++k)
        {
            act = firstActive(u(0,k)); // act is the leftmost non-zero func index 
            m=act; 
            for ( index_t i = 0; i!=m_p+2; ++i)
                result(i,k) = fupn_call(u(0,k), deriv_order, m++);
            m=act;
            tmp.resize(m < m_p+1 ? m_p+1-m : 0);
            //if (m < m_p+1) gsInfo << "Ls " << k << " " << m << "  " << tmp.size() << "\n";
            for (index_t j = 0; j!=m_p+2 && (m < m_p+1); ++j)
             {
                 //gsInfo <<m<<" ->  coefs:"<< m <<" = "<< mod_coeff(m).transpose() <<" * "<<result.col(k).topRows(m+1).transpose()<< "\n";
                 tmp(j)=result.col(k).topRows(m+1).dot(mod_coeff(m));
                 m++;
             }
             result.col(k).topRows(tmp.size())=tmp;

            //right side modification
            gsInfo << "\n";
            m=act+m_p+1;
            tmp.resize(m > size()-m_p-2 ? m_p-size()+m+2 : 0);
            //if (m > size()-m_p-2) gsInfo << "Rs " << k << " " << m << "  " << tmp.size() << "\n";
            for (index_t j = 0; j!=m_p+2 && (m > size()-m_p-2); ++j)
            {
                const index_t mm = size()-m-1;
                //gsInfo <<m<<" ->  coefs:"<< mm <<" = "<< mod_coeff(mm).reverse().transpose() <<" * "<<result.col(k).bottomRows(mm+1).transpose()<< "\n";
                tmp(j)=result.col(k).bottomRows(mm+1).dot(mod_coeff(mm).reverse());
                m--;
            }
            result.col(k).bottomRows(tmp.size())=tmp.reverse();
            //gsInfo <<"\ntmpsize "<<tmp.size()<<"\n";
        }
#endif 
    }

    // Look at gsBasis class for a description
    gsDomain<T> * domain() const { return const_cast<gsKnotVector<T> *>(&m_knots); }

    const gsKnotVector<T> & knots()const
    {
        return m_knots;
    }

    gsKnotVector<T> & knots()
    {
        return m_knots;
    }

    /// Get value of unmodified basis function \a i, at point \a u, of order \a deriv_order 
    inline T fupn_call(T u, int deriv_order, index_t i) const
    {
        T anc = m_knots.greville(i);
        T val = __fup_0_16_d_MOD_fupn(&m_p, &anc, &u, &m_knot_length, &deriv_order);
        return val / (1<<m_p);
    }

    T fupn_eval_single(T u, int deriv_order, index_t i) const
    {
        if (i<m_p+1)
        {
            gsVector<T> mc = mod_coeff(i);
            gsVector<T> tmp(mc.size());
            for (index_t j = 0; j<=i; ++j)
                tmp(j) = fupn_call(u, deriv_order, j);
            return mc.dot(tmp);
        }
        if ( i>size()-m_p-2 )
        {
            gsVector<T> mc = mod_coeff(size()-i-1);
            gsVector<T> tmp(mc.size());
            index_t c = 0;
            for (index_t j = i; j<size(); ++j)
                tmp(c++) = fupn_call(u, deriv_order, j);
            return mc.dot(tmp.reverse());
        }
        return fupn_call(u, deriv_order, i);
    }

    /// Modification coefficients for boundary Fup basis funcions (from order m_p=1 to m_p=10)
    gsVector<T> mod_coeff(index_t i) const
    {
        gsVector<T> res;

        switch (m_p)
        {
        case 1:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=2.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-1.0;
                res(1)=1.0; 
                return res;
            
            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        case 2:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=36.0/5.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-36.0/5.0;
                res(1)=18.0/13.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=1.0; 
                res(1)=-5.0/13.0;
                res(2)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }
        
        case 3:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=36.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-765.0/16.0;
                res(1)=45.0/16.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=221.0/16.0; 
                res(1)=-689.0/336.0;
                res(2)=26.0/21.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-1.0; 
                res(1)=5.0/21.0;
                res(2)=-5.0/21.0;
                res(3)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }
        
        case 4:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=32400.0/143.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-10737360.0/31031.0;
                res(1)=1620.0/217.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=62069760.0/441161.0; 
                res(1)=-3879360.0/441161.0; 
                res(2)=28800.0/14231.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-43200.0/2033.0; 
                res(1)=5852250.0/2339983.0;
                res(2)=-18511200.0/16379881.0;
                res(3)=1350.0/1151.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=1.0; 
                res(1)=-199.0/1151.0;
                res(2)=857.0/8057.0;
                res(3)=-199.0/1151.0;
                res(4)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        case 5:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=32400.0/19.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-635037975.0/226081.0;
                res(1)=289575.0/11899.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=5087274375.0/3700589.0; 
                res(1)=-140767125.0/3700589.0; //double check!!
                res(2)=93000.0/22703.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-25372050415500.0/85040239013.0; 
                res(1)=1480626784500.0/85040239013.0;
                res(2)=-343054417350.0/85040239013.0;
                res(3)=6403950.0/3745771.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=109623542.0/3745771.0; 
                res(1)=-151104458624.0/53133761635.0;
                res(2)=53030980632.0/53133761635.0;
                res(3)=-40916394862.0/53133761635.0;
                res(4)=16114.0/14185.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-1.0; 
                res(1)=1929.0/14185.0;
                res(2)=-857.0/14185.0;
                res(3)=857.0/14185.0;
                res(4)=-1929.0/14185.0;
                res(5)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }
        
        case 6:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=17146080.0/1153.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-32051791032660.0/1252177601.0;
                res(1)=101804850.0/1086017.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=596311757347228650.0/42730988524823.0; 
                res(1)=-7498708058499525.0/42730988524823.0; 
                res(2)=388168200.0/39346519.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-3494391759411670522125.0/938918733064795136.0; 
                res(1)=12673717315968484125.0/117364841633099392.0;
                res(2)=-13058740833446556675.0/938918733064795136.0;
                res(3)=141920426025.0/47725631488.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=162661500401561368197795.0/306660189715788024832.0; 
                res(1)=-1082898980843340893715.0/38332523714473503104.0;
                res(2)=1807759484905710896973.0/306660189715788024832.0;
                res(3)=-1519073565316762422177.0/613320379431576049664.0;
                res(4)=19822620132.0/12850964153.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-484857882180.0/12850964153.0; 
                res(1)=1353781553075522550.0/433676077015382587.0;
                res(2)=-386459389189772640.0/433676077015382587.0;
                res(3)=230409071761816710.0/433676077015382587.0;
                res(4)=-252196867791369900.0/433676077015382587.0;
                res(5)=37533510.0/33746579.0;
                return res;
            case 6:
                res.resize(7);
                res(0)=1.0; 
                res(1)=-3786931.0/33746579.0;
                res(2)=1317203.0/33746579.0;
                res(3)=-950419.0/33746579.0;
                res(4)=1317203.0/33746579.0;
                res(5)=-3786931.0/33746579.0;
                res(6)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        case 7:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=85730400.0/583.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-5635507762922625.0/21664692764.0;
                res(1)=15444867375.0/37160708.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=20761075716072534052875.0/137017730177040596.0; 
                res(1)=-120220251757048051875.0/137017730177040596.0; 
                res(2)=1724160589200.0/62681836229.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-408575713390989123548672329275.0/8927751494899336549920898.0; 
                res(1)=5871805636770875672365579875.0/8927751494899336549920898.0;
                res(2)=-442642720843756315098479025.0/8927751494899336549920898.0;
                res(3)=855010678162725.0/142429642014362.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=856878439377961902183533975808.0/105559194331757479179778763.0; 
                res(1)=-24560642609136831424008225024.0/105559194331757479179778763.0;
                res(2)=3156456708204211965679596288.0/105559194331757479179778763.0;
                res(3)=-3946552160145688289915115264.0/527795971658787395898893815.0;
                res(4)=18040288702464.0/7411322028115.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-14795435087814995636684114313.0/17512478592908937634021400.0; 
                res(1)=28728904990534053166700433.0/700499143716357505360856.0;
                res(2)=-6661037902629054903255171.0/875623929645446881701070.0;
                res(3)=12470727222059125909850919.0/4378119648227234408505350.0;
                res(4)=-30603525239655102798696213.0/17512478592908937634021400.0;
                res(5)=17001825574419.0/11814679301800.0;
                return res;
            case 6:
                res.resize(7);
                res(0)=550045243882331.0/11814679301800.0; 
                res(1)=-97691508559029088569.0/29112921303321112376.0;
                res(2)=14670700849043281223.0/18195575814575695235.0;
                res(3)=-35432950558980078157.0/90977879072878476175.0;
                res(4)=239309846173560521433.0/727823032583027809400.0;
                res(5)=-339441006147943684777.0/727823032583027809400.0;
                res(6)=67493158.0/61603283.0;
                return res;
            case 7:
                res.resize(8);
                res(0)=-1.0; 
                res(1)=5889875.0/61603283.0;
                res(2)=-1683987.0/61603283.0;
                res(3)=950419.0/61603283.0;
                res(4)=-950419.0/61603283.0;
                res(5)=1683987.0/61603283.0;
                res(6)=-5889875.0/61603283.0;
                res(7)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        case 8:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=2623350240000.0/1616353.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-10851968380269757356000.0/3712094238197903.0;
                res(1)=4779416218500.0/2296586351.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=439356645301194949289080392000.0/247217961565820956904321.0; 
                res(1)=-1179381477385195579820871000.0/247217961565820956904321.0; 
                res(2)=9370006944480000.0/107645837683471.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-34663156558062283342323294762773272500.0/59714792572572256204219864905559.0; 
                res(1)=979254560564758102174777831940004375.0/238859170290289024816879459622236.0;
                res(2)=-11173262177548627382433262985763750.0/59714792572572256204219864905559.0;
                res(3)=30587129857698631875.0/2218935496536767716.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=172415068681600402056933703432211632307368500.0/1462484512896187172572564901988337059463.0; 
                res(1)=-10434209116967475162894331241606169885957375.0/5849938051584748690290259607953348237852.0;
                res(2)=2550330081396547384108339053959688875250.0/17620295336098640633404396409498036861.0;
                res(3)=-133656690199957864776680087696309604487125.0/5849938051584748690290259607953348237852.0;
                res(4)=11532186282762056671200.0/2636371386511737357247.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-4020573133542078193995657122279350927989391200.0/260962133619814341740108732096374911013949.0; 
                res(1)=111286338481198853390685109248546074396894250.0/260962133619814341740108732096374911013949.0;
                res(2)=-163946925649937938842921562743956747958000.0/3144122091804992069157936531281625433903.0;
                res(3)=3342391597627461087064667601549528462149250.0/260962133619814341740108732096374911013949.0;
                res(4)=-1260214793016996832703867991208112867440800.0/260962133619814341740108732096374911013949.0;
                res(5)=210026935105261425900.0/98985345901929707267.0;
                return res;
            case 6:
                res.resize(7);
                res(0)=106314201014932904364535439888436096000.0/85161588019068842106079202739492853.0; 
                res(1)=-4724209205923406961731246541178110000.0/85161588019068842106079202739492853.0;
                res(2)=782554098129663169668397936160520000.0/85161588019068842106079202739492853.0;
                res(3)=-258438877379494416306944450314290000.0/85161588019068842106079202739492853.0;
                res(4)=140665020059539757019695262186384000.0/85161588019068842106079202739492853.0;
                res(5)=-113748836318147065741003926584784000.0/85161588019068842106079202739492853.0;
                res(6)=1177619500440000.0/860345410152359.0;
                return res;
            case 7:
                res.resize(8);
                res(0)=-14708960882498937600.0/264126040916774213.0; 
                res(1)=408801053675335251865870274850.0/114897480280072546664448890879.0;
                res(2)=-84778897323806807545426766400.0/114897480280072546664448890879.0;
                res(3)=34360597863839531834483802750.0/114897480280072546664448890879.0;
                res(4)=-23465764846785966736614710400.0/114897480280072546664448890879.0;
                res(5)=25652393023914281669922936450.0/114897480280072546664448890879.0;
                res(6)=-145590581261108885852059200.0/374258893420431748092667397.0;
                res(7)=471265114950.0/435010042483.0;
                return res;
            case 8:
                res.resize(9);
                res(0)=1.0; 
                res(1)=-36255072467.0/435010042483.0;
                res(2)=8802471283.0/435010042483.0;
                res(3)=-4080029267.0/435010042483.0;
                res(4)=3190676083.0/435010042483.0;
                res(5)=-4080029267.0/435010042483.0;
                res(6)=8802471283.0/435010042483.0;
                res(7)=-36255072467.0/435010042483.0;
                res(8)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }
            
        case 9:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=2623350240000.0/132809.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-6833958965375850979768125.0/189645145642588781.0;
                res(1)=16563515744041875.0/1427954021509.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=8334351835032129531303847647301396875.0/369537195189614582570471111831.0; 
                res(1)=-10409458308409939256206836018778125.0/369537195189614582570471111831.0; 
                res(2)=79692465014240400000.0/258787880858449259.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-501138543033899946397896408009086042124374709375.0/64631060098821328012917527812024382332507.0; 
                res(1)=1723657810815402546455840312162658984452968125.0/64631060098821328012917527812024382332507.0;
                res(2)=-194872213442721994418200321546853006758910625.0/258524240395285312051670111248097529330028.0;
                res(3)=35421658056093370639843125.0/998981248803887567149892.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=6119169082252638727515039775252210392833813475078648510.0/3563305003087134615157984007929744702710544801099.0; 
                res(1)=-2082134412281568322622210344748437159759376273721030.0/154926304482049331093825391649119334900458469613.0;
                res(2)=4990596908135297219584874920386509477360524263150795.0/7126610006174269230315968015859489405421089602198.0;
                res(3)=-517983331438180520796590378073694184961192576709005.0/7126610006174269230315968015859489405421089602198.0;
                res(4)=125763317196573275605401120.0/14267755305131480665891163.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-1652853788598801277214797641335296216404621190406766947565.0/6379848476784928023447247637312788724169026222438221.0; 
                res(1)=1102794586827163627175716500004095396555241275266087745.0/277384716381953392323793375535338640181262009671227.0;
                res(2)=-8267969705549955051205742126123193066785624665041588735.0/25519393907139712093788990549251154896676104889752884.0;
                res(3)=1376386802262181912347360430434048458509022913642676665.0/25519393907139712093788990549251154896676104889752884.0;
                res(4)=-84809107240004428416670410580714538243209755107200290.0/6379848476784928023447247637312788724169026222438221.0;
                res(5)=1569563704959762835637001450.0/447151520357962590093378167.0;
                return res;
            case 6:
                res.resize(7);
                res(0)=26748164974157142120595027132490329937639119901985183000.0/1008009645825321924213717410779843170440728623702349.0; 
                res(1)=-708354363178793766674819117455591827228373472220603000.0/1008009645825321924213717410779843170440728623702349.0;
                res(2)=81191509147024252132317030201220423419588943708141875.0/1008009645825321924213717410779843170440728623702349.0;
                res(3)=-131261698924334221757285851516710791818258814295541875.0/7056067520777253469496021875458902193085100365916443.0;
                res(4)=48273887363437794494451108359512783433302495111158750.0/7056067520777253469496021875458902193085100365916443.0;
                res(5)=-24440320488386655656737931284546510962245126689895250.0/7056067520777253469496021875458902193085100365916443.0;
                res(6)=30289515845990490423702000.0/15780036966280670510248829.0;
                return res;
            case 7:
                res.resize(8);
                res(0)=-6037530802505329474798388306561885656025016475200.0/3456062386475839249182513847591296528409889603.0; 
                res(1)=246976364534549121106465441530402334983377764800.0/3456062386475839249182513847591296528409889603.0;
                res(2)=-36838789990153177573351525067151067783974394350.0/456062386475839249182513847591296528409889603.0;
                res(3)=75592162400572816143089272118722861858681224750.0/24192436705330874744277596933139075698869227221.0;
                res(4)=-36164133034456581328351979489959032804075690000.0/24192436705330874744277596933139075698869227221.0;
                res(5)=25883664150939280357369989874986235872921963600.0/24192436705330874744277596933139075698869227221.0;
                res(6)=-26001615562951658133054794978071301339232471150.0/24192436705330874744277596933139075698869227221.0;
                res(7)=2020564213013322729450.0/1533103931063413307449.0;
                return res;
            case 8:
                res.resize(9);
                res(0)=99785066748225155994098.0/1533103931063413307449.0; 
                res(1)=-4640758230320684167797372903686528.0/1242037251008700783536245585695003.0;
                res(2)=846554828670884948306967216870488.0/1242037251008700783536245585695003.0;
                res(3)=-98454551669577810982721057827082.0/414012417002900261178748528565001.0;
                res(4)=169023189930556211489112879013270.0/1242037251008700783536245585695003.0;
                res(5)=-149358635983564376440199698744864.0/1242037251008700783536245585695003.0;
                res(6)=66835501520586764215214962430984.0/414012417002900261178748528565001.0;
                res(7)=-414285380805601579811710647330782.0/1242037251008700783536245585695003.0;
                res(8)=870020084966.0/810145500147.0;
                return res;
            case 9:
                res.resize(10);
                res(0)=-1.0; 
                res(1)= 59874584819.0/810145500147.0;
                res(2)=-12635560115.0/810145500147.0;
                res(3)= 1656460817.0/270048500049.0;
                res(4)=-3190676083.0/810145500147.0;
                res(5)= 3190676083.0/810145500147.0;
                res(6)=-1656460817.0/270048500049.0;
                res(7)= 12635560115.0/810145500147.0;
                res(8)=-59874584819.0/810145500147.0;
                res(9)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        case 10:
            switch (i)
            {
            case 0:
                res.resize(1);
                res(0)=35424672300864000.0/134926369.0; 
                return res;
            case 1:
                res.resize(2);
                res(0)=-12035766223943907902076129394500.0/24891079403762567473777.0;
                res(1)=13126995824791983750.0/184478983524433.0; 
                return res;
            case 2:
                res.resize(3);
                res(0)=2160947740319145346258565263672557949462854375.0/6992747124779609400204193934107812247.0; 
                res(1)=-2518050545574140883946681070318460832093125.0/13985494249559218800408387868215624494.0; 
                res(2)=45621215072742810944520000.0/37905386246089474457959.0;
                return res;
            case 3:
                res.resize(4);
                res(0)=-616533727729706056570915469921787733029435209564870148253125.0/5602888234384282661572023787721899880429818646609792.0; 
                res(1)=1024041611393032673692866837360362537197818872640215600625.0/5602888234384282661572023787721899880429818646609792.0;
                res(2)=-18201454131139987406342374858685349530908026186310760625.0/5602888234384282661572023787721899880429818646609792.0;
                res(3)=29842043863429688851935305533125.0/295624911879762578383262853376.0;
                return res;
            case 4:
                res.resize(5);
                res(0)=529324814283908549851255650556486544324500904449974968321212244249819625.0/20511938799616678708284481651925723367146881165735905556119852416.0; 
                res(1)=-2101679467237125359997408668011429331975870252149269381153341018595525.0/20511938799616678708284481651925723367146881165735905556119852416.0;
                res(2)=71088649862883936002999043506714796198169949027694226129824358352325.0/20511938799616678708284481651925723367146881165735905556119852416.0;
                res(3)=-9990259653342452470110097509542783652180361509326753364279128339775.0/41023877599233357416568963303851446734293762331471811112239704832.0;
                res(4)=2730600568949506468464176538457492800.0/138770029015412300243025321454118707.0;
                return res;
            case 5:
                res.resize(6);
                res(0)=-408306279238400873889137686131890638337927828969505230235698525378858334318375.0/95548942863793453661090704634701493080699084104200588993967072809613302.0; 
                res(1)=3378427324295507055273412128012617523315460373652036466993632647955626815875.0/95548942863793453661090704634701493080699084104200588993967072809613302.0;
                res(2)=-184774072881852448128813829841733850708690135595972044079492837859879766875.0/95548942863793453661090704634701493080699084104200588993967072809613302.0;
                res(3)=42717427883816895754011776640327642493118517327850021783100294669234837625.0/191097885727586907322181409269402986161398168208401177987934145619226604.0;
                res(4)=-1797091258303472004592421857951746215015399171183050667199524536270606500.0/47774471431896726830545352317350746540349542052100294496983536404806651.0;
                res(5)=2215867687961194197121448144799623250.0/344270818208092480944932585630496793.0;
                return res;
            case 6:
                res.resize(7);
                res(0)=3685180771564417158219644664234532587785970324189458527668141717545405219385375.0/7246462098393241081717865028267021112160484152651664247816015655574551854.0; 
                res(1)=-56269060393783446245157067778818768252311557572798159957490234398865253562875.0/7246462098393241081717865028267021112160484152651664247816015655574551854.0;
                res(2)=4475962508352073335909178898062321840300805413265875966886007811608583665075.0/7246462098393241081717865028267021112160484152651664247816015655574551854.0;
                res(3)=-1473172987833958465555609930696875395453059534661941585433832352740945719025.0/14492924196786482163435730056534042224320968305303328495632031311149103708.0;
                res(4)=7295370088918590015342682081336126231624390161129678471515022624634167900.0/278710080707432349296840962625654658160018621255833240300615986752867379.0;
                res(5)=-32020361189166118224101133733254687959309003006599920604718663270548043250.0/3623231049196620540858932514133510556080242076325832123908007827787275927.0;
                res(6)=31410483716130686451504865245518042400.0/10524362965340209988510616850919957039.0;
                return res;
            case 7:
                res.resize(8);
                res(0)=-46639739198413347741833057907112725206689682420174264466916142984438566500.0/1096310260260929735354697535491349804158700840243404017494676290470617.0; 
                res(1)=1177554359831484194981845661041205910476756513833258748597423585713790700.0/1096310260260929735354697535491349804158700840243404017494676290470617.0;
                res(2)=-126034420098636561457277154245308815774979560318328296669825510054953700.0/1096310260260929735354697535491349804158700840243404017494676290470617.0;
                res(3)=27033853041377011190930371726763456814894317387900371640033270071673625.0/1096310260260929735354697535491349804158700840243404017494676290470617.0;
                res(4)=-715280131074516491140189165815023757478138705308847269892107618974250.0/84331558481609979642669041191642292627592372326415693653436637728509.0;
                res(5)=4574686286518112714264428955578501887761854709610340036032073175264250.0/1096310260260929735354697535491349804158700840243404017494676290470617.0;
                res(6)=-2912286493486308383493224510765481870915046776310359925699333887097050.0/1096310260260929735354697535491349804158700840243404017494676290470617.0;
                res(7)=185240670444396320069522734968825.0/104168799942704225150507756720503.0;
                return res;
            case 8:
                res.resize(9);
                res(0)=39537455095088698519966987861113746065801926702089510335658340.0/16854614311793388287480171755745248743067278781646847754369.0; 
                res(1)=-1497351534900229702820918215575362867936597254621873667700288.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(2)=202818593367259882482310362318105749779634540957245801366176.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(3)=-53272804804711751695232590396927259540630767199484782021343.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(4)=22560754061725012357042879908853018620602823211143793470030.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(5)=-14167010847765985410574278233744407411720200562000431157230.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(6)=12578975878836615216391217050987077044143711405215361743402.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(7)=-15104849341218548494607844335757748465926240129439664079999.0/16854614311793388287480171755745248743067278781646847754369.0;
                res(8)=207024222435079079384683164.0/161800983798065265469127623.0;
                return res;
            case 9:
                res.resize(10);
                res(0)=-12089412128466841112165154780.0/161800983798065265469127623.0; 
                res(1)= 32334619565700420126725658795502747906712502.0/8299209459049251635752457582599987485209147.0;
                res(2)=-5265255467128787989086844081252889071903296.0/8299209459049251635752457582599987485209147.0;
                res(3)= 1612332148193379907757079950669592191098086.0/8299209459049251635752457582599987485209147.0;
                res(4)=-793390382679114524990860300482588078555852.0/8299209459049251635752457582599987485209147.0;
                res(5)= 587085205319329891631610270578670873992790.0/8299209459049251635752457582599987485209147.0;
                res(6)=-636837902017146572839419174916106932689888.0/8299209459049251635752457582599987485209147.0;
                res(7)= 1013712543537296217290710040578283241590214.0/8299209459049251635752457582599987485209147.0;
                res(8)=-2422512783064281409433038714968240927953004.0/8299209459049251635752457582599987485209147.0;
                res(9)=54699403878925146.0/51292700849130989.0;
                return res;
            case 10:
                res.resize(11);
                res(0)=1.0; 
                res(1)=-3406703029794157.0/51292700849130989.0;
                res(2)=635909188015085.0/51292700849130989.0;
                res(3)=-217218559829485.0/51292700849130989.0;
                res(4)=118304204497133.0/51292700849130989.0;
                res(5)=-97123863274861.0/51292700849130989.0;
                res(6)=118304204497133.0/51292700849130989.0;
                res(7)=-217218559829485.0/51292700849130989.0;
                res(8)=635909188015085.0/51292700849130989.0;
                res(9)=-3406703029794157.0/51292700849130989.0;
                res(10)=1.0;
                return res;

            default:
                GISMO_ERROR ("Wrong! No modification");
            }

        default:
            GISMO_ERROR ("Order not implemented");
        }

    }
public:
         
    memory::unique_ptr<gsGeometry<T> > makeGeometry( gsMatrix<T> coefs ) const
    { return nullptr; }

    // Look at gsBasis class for a description
    short_t domainDim() const { return Dim; }

    // Look at gsBasis class for a description
    index_t size() const { return m_knots.size() - m_p - 2; }

    /// @brief Returns the anchors (greville points) of the basis
    void anchors_into(gsMatrix<T> & result) const
    {
        m_knots.greville_into(result);
    }

    /// @brief Returns the anchors (greville points) of the basis
    void anchor_into(index_t i, gsMatrix<T> & result) const
    {
        result.resize(1,1);
        result(0,0) = m_knots.greville(i);
    }

    // Look at gsBasis class for a description
    void connectivity(const gsMatrix<T> & nodes,
                      gsMesh<T> & mesh) const { }


    inline index_t firstActive(T u) const
    {
        return ( inDomain(u) ? (m_knots.iFind(u)-m_knots.begin()) - m_p - 1 : 0 );
    }

    // Look at gsBasis class for a description
    void active_into(const gsMatrix<T> & u, gsMatrix<index_t>& result) const
    {
        result.resize(m_p+2, u.cols());
        for (index_t j = 0; j < u.cols(); ++j)
        {
            index_t first = firstActive(u(0,j));
            for (int i = 0; i != m_p+2; ++i)
                result(i,j) = first++;
        }
    }

    // Look at gsBasis class for a description
    gsMatrix<T> support() const
    {
        gsMatrix<T> res(1,2);
        res << domainStart() , domainEnd() ;
        return res;
    }

    // Look at gsBasis class for a description
    // check support for writing
    gsMatrix<T> support(const index_t & i ) const
    {
        GISMO_ASSERT( static_cast<size_t>(i) < m_knots.size()-m_p-1,
                  "Invalid index of basis function." );
     gsMatrix<T> res(1,2);
     res << ( i > m_p+1 ? m_knots[i] : m_knots[m_p+1] ),
        ( static_cast<size_t>(i) < (m_knots.size()-2*(m_p+2)) ? m_knots[i+m_p+2] :
          m_knots[m_knots.size()-m_p-2] );
            return res ;
    }

    // Look at gsBasis class for a description
    void eval_into(const gsMatrix<T> & u, gsMatrix<T>& result) const
    {
        fupn_eval(u,0,result);
    }

    // Look at gsBasis class for a description
    void evalSingle_into(index_t i, const gsMatrix<T> & u, gsMatrix<T>& result) const
    {
        result.resize(1, u.cols() );
        for ( index_t k = 0; k!=u.cols(); ++k)
            result(0,k) = fupn_eval_single(u(0,k), 0, i);
    }

    // Look at gsBasis class for a description
    void deriv_into(const gsMatrix<T> & u, gsMatrix<T>& result ) const
    {
        fupn_eval(u,1,result);
    }

    // Look at gsBasis class for a description
    void derivSingle_into(index_t i, const gsMatrix<T> & u, gsMatrix<T>& result ) const
    {
        result.resize(1, u.cols() );
        for ( index_t k = 0; k!=u.cols(); ++k)
            result(0,k) = fupn_eval_single(u(0,k), 1, i);
    }

    // Look at gsBasis class for a description
    void deriv2_into(const gsMatrix<T> & u, gsMatrix<T>& result ) const
    {
        fupn_eval(u,2,result);
    }

    // Look at gsBasis class for a description
    void deriv2Single_into(index_t i, const gsMatrix<T> & u, gsMatrix<T>& result ) const
    {
        result.resize(1, u.cols() );
        for ( index_t k = 0; k!=u.cols(); ++k)
            result(0,k) = fupn_eval_single(u(0,k), 2, i);
    }

    // Look at gsBasis class for a description
    gsMatrix<T> laplacian(const gsMatrix<T> & u ) const { return gsMatrix<T>(); }

    /// @brief Check the FupBasis for consistency
    bool check() const
    {
        return true;
    }

    /// @brief Prints the object as a string.
    std::ostream &print(std::ostream &os) const
    {
        os << "FupBasis: deg=" <<degree()
           << ", size="<< size() << ", knot vector:\n";
        os << m_knots;
        os << "\nCharacteristic length: "<< m_knot_length <<"\n";
        return os;
    }

    // Look at gsBasis class for a description
    virtual void evalDerSingle_into(index_t i, const gsMatrix<T> & u,
                                    int n, gsMatrix<T>& result) const
    {

    }

    // Look at gsBasis class for a description
    virtual void evalAllDers_into(const gsMatrix<T> & u, int n,
                                  std::vector<gsMatrix<T> >& result) const
    {
        result.resize(n+1);
        for ( index_t j = 0; j<=n; ++j)
            fupn_eval(u,j,result[j]);
    }

    // Look at gsBasis class for a description
    virtual void evalAllDersSingle_into(index_t i, const gsMatrix<T> & u,
                                        int n, gsMatrix<T>& result) const
    {
        result.resize(n+1, u.cols() );
        for ( index_t j = 0; j<=n; ++j)
            for ( index_t k = 0; k!=u.cols(); ++k)
                result(j,k) = fupn_eval_single(u(0,k), j, i);
    }

    // Look at gsBasis class for a description
    short_t degree(short_t i) const
    {
        return m_p;
    }

    short_t degree() const {return m_p;}

    // Look at gsBasis class for a description
    short_t maxDegree()   const { return m_p; }

    // Look at gsBasis class for a description
    short_t minDegree()   const { return m_p; }

    // Look at gsBasis class for a description
    short_t totalDegree() const { return m_p; }

    /// @brief Returns the order of the B-spline  basis
    inline unsigned order() const { return m_p+1; }

    /// @brief True iff the point \a pp is in the domain of the basis
    inline bool inDomain(T const & pp) const
    { return true; }

    /// @brief Returns the starting value of the domain of the basis
    T domainStart() const { return *m_knots.domainBegin(); }

    /// @brief Returns the ending value of the domain of the basis
    T domainEnd() const { return *m_knots.domainEnd(); }

    // Number of active functions at any point of the domain
    inline index_t numActive() const { return m_p + 2; }

    // Look at gsBasis class for a description
    void uniformRefine(int numKnots = 1, int mul=1)
    {
        GISMO_ASSERT(1==mul, "multiple knot ?");
        m_knots.uniformRefine(numKnots,mul);
    }

    /// @brief Elevate the degree of the basis and preserve the smoothness
    void degreeElevate(short_t const & i = 1, short_t const dir = -1)
    {
        GISMO_UNUSED(dir);
        GISMO_ASSERT( dir == -1 || dir == 0, "Invalid direction");

    }

    // Look at gsBasis for documentation
    void degreeReduce (short_t const & i = 1, short_t const dir = -1)
    {
        GISMO_UNUSED(dir);
        GISMO_ASSERT( dir == -1 || dir == 0, "Invalid direction");
        GISMO_ASSERT( i<=m_p, "Cannot reduce degree to negative");

    }

    typename gsBasis<T>::domainIter makeDomainIterator() const
    {
        return typename gsBasis<T>::domainIter(new gsTensorDomainIterator<T,1>(*this));
    }

    typename gsBasis<T>::domainIter makeDomainIterator(const boxSide & s) const
    {
        return ( s == boundary::none ?
                 typename gsBasis<T>::domainIter(new gsTensorDomainIterator<T,1>(*this)) :
                 typename gsBasis<T>::domainIter(new gsTensorDomainBoundaryIterator<T,1>(*this, s))
                );
    }

}; // class gsFupBasis<1>


} // namespace gismo


//#ifndef GISMO_BUILD_LIB
//#include GISMO_HPP_HEADER(gsFupBasis.hpp)
//#endif
