/** @file gsTensor.h

    @brief Provides declarations of the gsTensor class which is a
    wrapper of the PyTorch torch::tensor class (https://pytorch.org)

    This file is part of the G+Smo library.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.

    Author(s): M. Moller
*/

#pragma once

#ifdef index_t
#define _index_t index_t
#undef index_t
#endif

#include <torch/torch.h>

#ifdef _index_t
#define index_t _index_t
#undef _index_t
#endif

#include <gsCore/gsConfig.h>

namespace gismo {
  
  // Create alias to torch::Tensor (do not use at:Tensor which is not differentiable)
  template <typename T> using gsTensor = torch::Tensor;
  
  // Create alias to torch::TensorOptions
  template <typename T>
  class gsTensorOptions : public torch::TensorOptions
  {
  public:
    gsTensorOptions() : torch::TensorOptions() {}
    gsTensorOptions(torch::TensorOptions other) : torch::TensorOptions(other) {}
    gsTensorOptions(const gsTensorOptions&) = default;
    gsTensorOptions(gsTensorOptions&&)      = default;

    // Core functionality
    gsTensorOptions setActive();//          { return this->requires_grad(true); }
    gsTensorOptions setPassive();//         { return this->requires_grad(false); }
    gsTensorOptions setStrided();//         { return this->layout(torch::kStrided); }
    gsTensorOptions setSparse();//          { return this->layout(torch::kSparse); }
    gsTensorOptions setCPU();//             { return this->device(torch::kCPU); }
    gsTensorOptions setGPU(int device=0);// { return this->device(torch::kCUDA, device); }
  };

  /*
  // Specializations for floating-point numbers
  template<> gsTensorOptions<double>::gsTensorOptions() : torch::TensorOptions(torch::kFloat64) {}
  template<> gsTensorOptions<float>::gsTensorOptions()  : torch::TensorOptions(torch::kFloat32) {}

  // Specializations for integers
  template<> gsTensorOptions<long long>::gsTensorOptions()  : torch::TensorOptions(torch::kInt64) {}
  template<> gsTensorOptions<long>::gsTensorOptions()       : torch::TensorOptions(sizeof(long)  == 32 ? torch::kInt32 : torch::kInt64) {}
  template<> gsTensorOptions<int>::gsTensorOptions()        : torch::TensorOptions(sizeof(int)   == 16 ? torch::kInt16 : torch::kInt32) {}
  template<> gsTensorOptions<short>::gsTensorOptions()      : torch::TensorOptions(sizeof(short) == 16 ? torch::kInt16 : torch::kInt32) {}
  */

  namespace math {

    // LibTorch types cannot be be used as native types in G+Smo and
    // are therefore not included in gsCore/gsMath.h
    // However, to make math functions accessible under the namespace
    // gismo::math::func we import them here.
    using torch::abs;
    using torch::acos;
    using torch::asin;
    using torch::atan2;
    using torch::atan;
    using torch::ceil;
    using torch::cos;
    using torch::cosh;
    using torch::exp;
    using torch::floor;
    //using torch::frexp;
    //using torch::ldexp;
    using torch::log10;
    using torch::log;
    using torch::max;
    using torch::min;
    using torch::pow;
    using torch::sin;
    using torch::sinh;
    using torch::sqrt;
    using torch::tan;
    using torch::tanh;
    using torch::real;
    using torch::imag;
    using torch::conj;

    // dummy
    inline torch::Tensor frexp(const torch::Tensor & a, int* b) { return a; }
    inline torch::Tensor ldexp(const torch::Tensor & a, int* b) { return a; }
    
  } // end namespace math
  
  // Import factory functions from namespace torch
  using torch::__and__;
  using torch::__lshift__;
  using torch::__or__;
  using torch::__rshift__;
  using torch::__xor__;
  
  using torch::_adaptive_avg_pool2d;
  using torch::_adaptive_avg_pool2d_backward;
  using torch::_add_batch_dim;
  using torch::_add_relu;
  using torch::_aminmax;
  using torch::_amp_non_finite_check_and_unscale_;
  using torch::_amp_update_scale;
  using torch::_batch_norm_impl_index;
  using torch::_batch_norm_impl_index_backward;
  using torch::_bmm;
  using torch::_cast_Byte;
  using torch::_cast_Char;
  using torch::_cast_Double;
  using torch::_cast_Float;
  using torch::_cast_Half;
  using torch::_cast_Int;
  using torch::_cast_Long;
  using torch::_cast_Short;
  using torch::_cat;
  using torch::_cdist_backward;
  using torch::_cdist_forward;
  using torch::_cholesky_helper;
  using torch::_cholesky_solve_helper;
  using torch::_choose_qparams_per_tensor;
  using torch::_compute_linear_combination;
  using torch::_conj;
  using torch::_convolution;
  using torch::_convolution_double_backward;
  using torch::_convolution_nogroup;
  using torch::_copy_from;
  using torch::_ctc_loss;
  using torch::_ctc_loss_backward;
  using torch::_cudnn_ctc_loss;
  using torch::_cudnn_init_dropout_state;
  using torch::_cudnn_rnn;
  using torch::_cudnn_rnn_backward;
  using torch::_cudnn_rnn_flatten_weight;
  using torch::_cufft_clear_plan_cache;
  using torch::_cufft_get_plan_cache_max_size;
  using torch::_cufft_get_plan_cache_size;
  using torch::_cufft_set_plan_cache_max_size;
  using torch::_cummax_helper;
  using torch::_cummin_helper;
  using torch::_cumprod;
  using torch::_cumsum;
  using torch::_debug_has_internal_overlap;
  //using torch::_dimI;
  //using torch::_dimV;
  using torch::_dim_arange;
  using torch::_dirichlet_grad;
  using torch::_embedding_bag;
  using torch::_embedding_bag_backward;
  using torch::_embedding_bag_dense_backward;
  using torch::_embedding_bag_forward_only;
  using torch::_embedding_bag_per_sample_weights_backward;
  using torch::_embedding_bag_sparse_backward;
  using torch::_empty_affine_quantized;
  using torch::_empty_per_channel_affine_quantized;
  using torch::_euclidean_dist;
  using torch::_fake_quantize_learnable_per_channel_affine;
  using torch::_fake_quantize_learnable_per_channel_affine_backward;
  using torch::_fake_quantize_learnable_per_tensor_affine;
  using torch::_fake_quantize_learnable_per_tensor_affine_backward;
  using torch::_fft_with_size;
  using torch::_foreach_add;
  using torch::_foreach_add_;
  using torch::_foreach_add_scalar_list;
  using torch::_foreach_add_scalar_list_;
  using torch::_foreach_addcdiv;
  using torch::_foreach_addcdiv_;
  using torch::_foreach_addcmul;
  using torch::_foreach_addcmul_;
  using torch::_foreach_div;
  using torch::_foreach_div_;
  using torch::_foreach_div_scalar_list;
  using torch::_foreach_div_scalar_list_;
  using torch::_foreach_exp;
  using torch::_foreach_exp_;
  using torch::_foreach_mul;
  using torch::_foreach_mul_;
  using torch::_foreach_mul_scalar_list;
  using torch::_foreach_mul_scalar_list_;
  using torch::_foreach_sqrt;
  using torch::_foreach_sqrt_;
  using torch::_foreach_sub;
  using torch::_foreach_sub_;
  using torch::_foreach_sub_scalar_list;
  using torch::_foreach_sub_scalar_list_;
  using torch::_fused_dropout;
  using torch::_gather_sparse_backward;
  using torch::_grid_sampler_2d_cpu_fallback;
  using torch::_grid_sampler_2d_cpu_fallback_backward;
  using torch::_has_compatible_shallow_copy_type;
  //using torch::_indices;
  using torch::_inverse_helper;
  using torch::_local_scalar_dense;
  using torch::_log_softmax;
  using torch::_log_softmax_backward_data;
  using torch::_logcumsumexp;
  using torch::_lu_solve_helper;
  using torch::_lu_with_info;
  using torch::_make_per_channel_quantized_tensor;
  using torch::_make_per_tensor_quantized_tensor;
  using torch::_masked_scale;
  using torch::_mkldnn_reshape;
  using torch::_mkldnn_transpose;
  using torch::_mode;
  using torch::_multinomial_alias_draw;
  using torch::_multinomial_alias_setup;
  using torch::_nnpack_available;
  using torch::_nnpack_spatial_convolution;
  using torch::_nnpack_spatial_convolution_backward;
  using torch::_nnpack_spatial_convolution_backward_input;
  using torch::_nnpack_spatial_convolution_backward_weight;
  //using torch::_nnz;
  using torch::_pack_padded_sequence;
  using torch::_pack_padded_sequence_backward;
  using torch::_pad_packed_sequence;
  using torch::_pdist_backward;
  using torch::_pdist_forward;
  using torch::_qr_helper;
  using torch::_remove_batch_dim;
  using torch::_reshape_from_tensor;
  using torch::_s_where;
  using torch::_sample_dirichlet;
  using torch::_saturate_weight_to_fp16;
  using torch::_shape_as_tensor;
  using torch::_sobol_engine_draw;
  using torch::_softmax;
  using torch::_softmax_backward_data;
  using torch::_solve_helper;
  using torch::_sparse_addmm;
  using torch::_sparse_coo_tensor_unsafe;
  using torch::_sparse_coo_tensor_with_dims;
  using torch::_sparse_coo_tensor_with_dims_and_tensors;
  using torch::_sparse_log_softmax;
  using torch::_sparse_log_softmax_backward_data;
  using torch::_sparse_mm;
  using torch::_sparse_softmax;
  using torch::_sparse_softmax_backward_data;
  using torch::_sparse_sum;
  using torch::_sparse_sum_backward;
  using torch::_standard_gamma;
  using torch::_standard_gamma_grad;
  using torch::_std;
  using torch::_svd_helper;
  using torch::_symeig_helper;
  using torch::_test_optional_filled_intlist;
  using torch::_test_optional_floatlist;
  using torch::_test_optional_intlist;
  using torch::_test_serialization_subcmul;
  using torch::_thnn_differentiable_gru_cell_backward;
  using torch::_thnn_differentiable_lstm_cell_backward;
  using torch::_thnn_fused_gru_cell;
  using torch::_thnn_fused_gru_cell_backward;
  using torch::_thnn_fused_lstm_cell;
  using torch::_thnn_fused_lstm_cell_backward;
  using torch::_triangular_solve_helper;
  using torch::_trilinear;
  using torch::_unique;
  using torch::_unique2;
  using torch::_unsafe_view;
  using torch::_use_cudnn_ctc_loss;
  using torch::_use_cudnn_rnn_flatten_weight;
  using torch::_validate_sparse_coo_tensor_args;
  //using torch::_values;
  using torch::_var;
  //using torch::_version;
  using torch::_weight_norm;
  using torch::_weight_norm_cuda_interface;
  using torch::_weight_norm_cuda_interface_backward;
  using torch::_weight_norm_differentiable_backward;
  
  using torch::abs;
  using torch::absolute;
  using torch::acos;
  using torch::acosh;
  using torch::adaptive_avg_pool1d;
  using torch::adaptive_avg_pool2d;
  using torch::adaptive_avg_pool3d;
  using torch::adaptive_avg_pool3d_backward;
  using torch::adaptive_max_pool1d;
  using torch::adaptive_max_pool2d;
  using torch::adaptive_max_pool2d_backward;
  using torch::adaptive_max_pool3d;
  using torch::adaptive_max_pool3d_backward;
  using torch::add;
  using torch::addbmm;
  using torch::addcdiv;
  using torch::addcmul;
  using torch::addmm;
  using torch::addmv;
  using torch::addr;
  using torch::affine_grid_generator;
  using torch::affine_grid_generator_backward;
  using torch::alias;
  //using torch::align_as;
  using torch::align_tensors;
  //using torch::align_to;
  using torch::all;
  using torch::allclose;
  using torch::alpha_dropout;
  using torch::amax;
  using torch::amin;
  using torch::angle;
  using torch::any;
  using torch::arange;
  using torch::arccos;
  using torch::arccosh;
  using torch::arcsin;
  using torch::arcsinh;
  using torch::arctan;
  using torch::arctanh;
  using torch::argmax;
  using torch::argmin;
  using torch::argsort;
  using torch::as_strided;
  using torch::asin;
  using torch::asinh;
  using torch::atan;
  using torch::atan2;
  using torch::atanh;
  using torch::atleast_1d;
  using torch::atleast_2d;
  using torch::atleast_3d;
  using torch::avg_pool1d;
  using torch::avg_pool2d;
  using torch::avg_pool2d_backward;
  using torch::avg_pool3d;
  using torch::avg_pool3d_backward;
  //using torch::backward;
  using torch::baddbmm;
  using torch::bartlett_window;
  using torch::batch_norm;
  using torch::batch_norm_backward_elemt;
  using torch::batch_norm_backward_reduce;
  using torch::batch_norm_elemt;
  using torch::batch_norm_gather_stats;
  using torch::batch_norm_gather_stats_with_counts;
  using torch::batch_norm_stats;
  using torch::batch_norm_update_stats;
  using torch::bernoulli;
  using torch::bilinear;
  using torch::binary_cross_entropy;
  using torch::binary_cross_entropy_backward;
  using torch::binary_cross_entropy_with_logits;
  using torch::binary_cross_entropy_with_logits_backward;
  using torch::bincount;
  using torch::binomial;
  using torch::bitwise_and;
  using torch::bitwise_not;
  using torch::bitwise_or;
  using torch::bitwise_xor;
  using torch::blackman_window;
  using torch::block_diag;
  using torch::bmm;
  using torch::broadcast_tensors;
  using torch::bucketize;
  using torch::can_cast;
  using torch::cartesian_prod;
  using torch::cat;
  using torch::cdist;
  using torch::ceil;
  using torch::celu;
  using torch::chain_matmul;
  using torch::channel_shuffle;
  using torch::cholesky;
  using torch::cholesky_inverse;
  using torch::cholesky_solve;
  using torch::choose_qparams_optimized;
  using torch::chunk;
  using torch::clamp;
  using torch::clamp_max;
  using torch::clamp_min;
  using torch::clip;
  using torch::clone;
  //using torch::coalesce;
  using torch::col2im;
  using torch::col2im_backward;
  using torch::combinations;
  using torch::complex;
  using torch::conj;
  using torch::constant_pad_nd;
  //using torch::contiguous;
  using torch::conv1d;
  using torch::conv2d;
  using torch::conv3d;
  using torch::conv_tbc;
  using torch::conv_tbc_backward;
  using torch::conv_transpose1d;
  using torch::conv_transpose2d;
  using torch::conv_transpose3d;
  using torch::convolution;
  using torch::convolution_backward_overrideable;
  using torch::convolution_overrideable;
  using torch::cos;
  using torch::cosh;
  using torch::cosine_embedding_loss;
  using torch::cosine_similarity;
  using torch::count_nonzero;
  using torch::cross;
  using torch::ctc_loss;
  using torch::cudnn_affine_grid_generator;
  using torch::cudnn_affine_grid_generator_backward;
  using torch::cudnn_batch_norm;
  using torch::cudnn_batch_norm_backward;
  using torch::cudnn_convolution;
  using torch::cudnn_convolution_backward;
  using torch::cudnn_convolution_backward_input;
  using torch::cudnn_convolution_backward_weight;
  using torch::cudnn_convolution_transpose;
  using torch::cudnn_convolution_transpose_backward;
  using torch::cudnn_convolution_transpose_backward_input;
  using torch::cudnn_convolution_transpose_backward_weight;
  using torch::cudnn_grid_sampler;
  using torch::cudnn_grid_sampler_backward;
  using torch::cudnn_is_acceptable;
  using torch::cummax;
  using torch::cummaxmin_backward;
  using torch::cummin;
  using torch::cumprod;
  using torch::cumprod_backward;
  using torch::cumsum;
  //using torch::data;
  using torch::deg2rad;
  //using torch::dense_dim;
  using torch::dequantize;
  using torch::det;
  using torch::detach;
  using torch::diag;
  using torch::diag_backward;
  using torch::diag_embed;
  using torch::diagflat;
  using torch::diagonal;
  using torch::diagonal_backward;
  using torch::digamma;
  using torch::dist;
  using torch::div;
  using torch::divide;
  using torch::dot;
  using torch::dropout;
  using torch::dstack;
  using torch::eig;
  using torch::einsum;
  using torch::elu;
  using torch::elu_backward;
  using torch::embedding;
  using torch::embedding_backward;
  using torch::embedding_bag;
  using torch::embedding_dense_backward;
  using torch::embedding_sparse_backward;
  using torch::empty;
  using torch::empty_like;
  using torch::empty_meta;
  using torch::empty_quantized;
  using torch::empty_strided;
  using torch::eq;
  using torch::equal;
  using torch::erf;
  using torch::erfc;
  using torch::erfinv;
  using torch::exp;
  using torch::exp2;
  //using torch::expand;
  //using torch::expand_as;
  using torch::expm1;
  using torch::eye;
  using torch::fake_quantize_per_channel_affine;
  using torch::fake_quantize_per_channel_affine_backward;
  using torch::fake_quantize_per_tensor_affine;
  using torch::fake_quantize_per_tensor_affine_backward;
  using torch::fbgemm_linear_fp16_weight;
  using torch::fbgemm_linear_fp16_weight_fp32_activation;
  using torch::fbgemm_linear_int8_weight;
  using torch::fbgemm_linear_int8_weight_fp32_activation;
  using torch::fbgemm_linear_quantize_weight;
  using torch::fbgemm_pack_gemm_matrix_fp16;
  using torch::fbgemm_pack_quantized_matrix;
  using torch::feature_alpha_dropout;
  using torch::feature_dropout;
  using torch::fft;
  using torch::fft_fft;
  using torch::fft_fftn;
  using torch::fft_hfft;
  using torch::fft_ifft;
  using torch::fft_ifftn;
  using torch::fft_ihfft;
  using torch::fft_irfft;
  using torch::fft_irfftn;
  using torch::fft_rfft;
  using torch::fft_rfftn;
  using torch::fix;
  using torch::flatten;
  using torch::flip;
  using torch::fliplr;
  using torch::flipud;
  using torch::floor;
  using torch::floor_divide;
  using torch::fmod;
  using torch::frac;
  using torch::fractional_max_pool2d;
  using torch::fractional_max_pool2d_backward;
  using torch::fractional_max_pool3d;
  using torch::fractional_max_pool3d_backward;
  using torch::frobenius_norm;
  using torch::from_file;
  using torch::full;
  using torch::full_like;
  using torch::gather;
  using torch::gather_backward;
  using torch::gcd;
  using torch::ge;
  using torch::gelu;
  using torch::gelu_backward;
  using torch::geqrf;
  using torch::ger;
  using torch::glu;
  using torch::glu_backward;
  using torch::greater;
  using torch::greater_equal;
  using torch::grid_sampler;
  using torch::grid_sampler_2d;
  using torch::grid_sampler_2d_backward;
  using torch::grid_sampler_3d;
  using torch::grid_sampler_3d_backward;
  using torch::group_norm;
  using torch::gru;
  using torch::gru_cell;
  using torch::gt;
  using torch::hamming_window;
  using torch::hann_window;
  using torch::hardshrink;
  using torch::hardshrink_backward;
  using torch::hardsigmoid;
  using torch::hardsigmoid_backward;
  using torch::hardswish;
  using torch::hardswish_backward;
  using torch::hardtanh;
  using torch::hardtanh_backward;
  using torch::heaviside;
  using torch::hinge_embedding_loss;
  using torch::histc;
  using torch::hspmm;
  using torch::hstack;
  using torch::hypot;
  using torch::i0;
  using torch::ifft;
  using torch::im2col;
  using torch::im2col_backward;
  using torch::imag;
  using torch::index;
  using torch::index_add;
  using torch::index_copy;
  using torch::index_fill;
  using torch::index_put;
  using torch::index_select;
  using torch::index_select_backward;
  //using torch::indices;
  using torch::infinitely_differentiable_gelu_backward;
  using torch::instance_norm;
  using torch::int_repr;
  using torch::inverse;
  using torch::irfft;
  //using torch::is_coalesced;
  using torch::is_complex;
  using torch::is_distributed;
  using torch::is_floating_point;
  //using torch::is_leaf;
  using torch::is_nonzero;
  //using torch::is_pinned;
  using torch::is_same_size;
  //using torch::is_set_to;
  using torch::is_signed;
  using torch::is_vulkan_available;
  using torch::isclose;
  using torch::isfinite;
  using torch::isinf;
  using torch::isnan;
  using torch::isneginf;
  using torch::isposinf;
  using torch::isreal;
  using torch::istft;
  //using torch::item;
  using torch::kaiser_window;
  using torch::kl_div;
  using torch::kl_div_backward;
  using torch::kthvalue;
  using torch::l1_loss;
  using torch::l1_loss_backward;
  using torch::layer_norm;
  using torch::lcm;
  using torch::le;
  using torch::leaky_relu;
  using torch::leaky_relu_backward;
  using torch::lerp;
  using torch::less;
  using torch::less_equal;
  using torch::lgamma;
  using torch::linalg_det;
  using torch::linalg_norm;
  using torch::linear;
  using torch::linspace;
  using torch::log;
  using torch::log10;
  using torch::log1p;
  using torch::log2;
  using torch::log_sigmoid;
  using torch::log_sigmoid_backward;
  using torch::log_sigmoid_forward;
  using torch::log_softmax;
  using torch::logaddexp;
  using torch::logaddexp2;
  using torch::logcumsumexp;
  using torch::logdet;
  using torch::logical_and;
  using torch::logical_not;
  using torch::logical_or;
  using torch::logical_xor;
  using torch::logit;
  using torch::logit_backward;
  using torch::logspace;
  using torch::logsumexp;
  using torch::lstm;
  using torch::lstm_cell;
  using torch::lstsq;
  using torch::lt;
  using torch::lu_solve;
  using torch::margin_ranking_loss;
  using torch::masked_fill;
  using torch::masked_scatter;
  using torch::masked_select;
  using torch::masked_select_backward;
  using torch::matmul;
  using torch::matrix_exp;
  using torch::matrix_exp_backward;
  using torch::matrix_power;
  using torch::matrix_rank;
  using torch::max;
  using torch::max_pool1d;
  using torch::max_pool1d_with_indices;
  using torch::max_pool2d;
  using torch::max_pool2d_with_indices;
  using torch::max_pool2d_with_indices_backward;
  using torch::max_pool3d;
  using torch::max_pool3d_with_indices;
  using torch::max_pool3d_with_indices_backward;
  using torch::max_unpool2d;
  using torch::max_unpool2d_backward;
  using torch::max_unpool3d;
  using torch::max_unpool3d_backward;
  using torch::maximum;
  using torch::mean;
  using torch::median;
  using torch::meshgrid;
  using torch::min;
  using torch::minimum;
  using torch::miopen_batch_norm;
  using torch::miopen_batch_norm_backward;
  using torch::miopen_convolution;
  using torch::miopen_convolution_backward;
  using torch::miopen_convolution_backward_bias;
  using torch::miopen_convolution_backward_input;
  using torch::miopen_convolution_backward_weight;
  using torch::miopen_convolution_transpose;
  using torch::miopen_convolution_transpose_backward;
  using torch::miopen_convolution_transpose_backward_input;
  using torch::miopen_convolution_transpose_backward_weight;
  using torch::miopen_depthwise_convolution;
  using torch::miopen_depthwise_convolution_backward;
  using torch::miopen_depthwise_convolution_backward_input;
  using torch::miopen_depthwise_convolution_backward_weight;
  using torch::miopen_rnn;
  using torch::miopen_rnn_backward;
  using torch::mkldnn_adaptive_avg_pool2d;
  using torch::mkldnn_convolution;
  using torch::mkldnn_convolution_backward;
  using torch::mkldnn_convolution_backward_input;
  using torch::mkldnn_convolution_backward_weights;
  using torch::mkldnn_linear;
  using torch::mkldnn_max_pool2d;
  using torch::mkldnn_max_pool3d;
  using torch::mkldnn_reorder_conv2d_weight;
  using torch::mkldnn_reorder_conv3d_weight;
  using torch::mm;
  using torch::mode;
  using torch::movedim;
  using torch::mse_loss;
  using torch::mse_loss_backward;
  using torch::mul;
  using torch::multi_margin_loss;
  using torch::multi_margin_loss_backward;
  using torch::multilabel_margin_loss;
  using torch::multilabel_margin_loss_backward;
  using torch::multilabel_margin_loss_forward;
  using torch::multinomial;
  using torch::multiply;
  using torch::mv;
  using torch::mvlgamma;
  using torch::nanquantile;
  using torch::nansum;
  using torch::narrow;
  //using torch::narrow_copy;
  using torch::native_batch_norm;
  using torch::native_batch_norm_backward;
  using torch::native_group_norm;
  using torch::native_group_norm_backward;
  using torch::native_layer_norm;
  using torch::native_layer_norm_backward;
  using torch::native_norm;
  using torch::ne;
  using torch::neg;
  using torch::negative;
  //using torch::new_empty;
  //using torch::new_full;
  //using torch::new_zeros;
  using torch::nextafter;
  using torch::nll_loss;
  using torch::nll_loss2d;
  using torch::nll_loss2d_backward;
  using torch::nll_loss2d_forward;
  using torch::nll_loss_backward;
  using torch::nll_loss_forward;
  using torch::nonzero;
  using torch::nonzero_numpy;
  using torch::norm;
  using torch::norm_except_dim;
  using torch::normal;
  using torch::not_equal;
  using torch::nuclear_norm;
  //using torch::numpy_T;
  using torch::one_hot;
  using torch::ones;
  using torch::ones_like;
  using torch::orgqr;
  using torch::ormqr;
  using torch::outer;
  //using torch::output_nr;
  using torch::pairwise_distance;
  using torch::pdist;
  //using torch::permute;
  //using torch::pin_memory;
  using torch::pinverse;
  using torch::pixel_shuffle;
  using torch::poisson;
  using torch::poisson_nll_loss;
  using torch::polar;
  using torch::polygamma;
  using torch::pow;
  using torch::prelu;
  using torch::prelu_backward;
  using torch::prod;
  using torch::promote_types;
  using torch::q_per_channel_axis;
  using torch::q_per_channel_scales;
  using torch::q_per_channel_zero_points;
  using torch::q_scale;
  using torch::q_zero_point;
  using torch::qr;
  //using torch::qscheme;
  using torch::quantile;
  using torch::quantize_per_channel;
  using torch::quantize_per_tensor;
  using torch::quantized_batch_norm;
  using torch::quantized_gru_cell;
  using torch::quantized_lstm_cell;
  using torch::quantized_max_pool1d;
  using torch::quantized_max_pool2d;
  using torch::quantized_rnn_relu_cell;
  using torch::quantized_rnn_tanh_cell;
  using torch::rad2deg;
  using torch::rand;
  using torch::rand_like;
  using torch::randint;
  using torch::randint_like;
  using torch::randn;
  using torch::randn_like;
  using torch::randperm;
  using torch::range;
  using torch::real;
  using torch::reciprocal;
  //using torch::refine_names;
  using torch::reflection_pad1d;
  using torch::reflection_pad1d_backward;
  using torch::reflection_pad2d;
  using torch::reflection_pad2d_backward;
  using torch::relu;
  using torch::remainder;
  //using torch::rename;
  using torch::renorm;
  //using torch::repeat;
  using torch::repeat_interleave;
  using torch::replication_pad1d;
  using torch::replication_pad1d_backward;
  using torch::replication_pad2d;
  using torch::replication_pad2d_backward;
  using torch::replication_pad3d;
  using torch::replication_pad3d_backward;
  using torch::reshape;
  //using torch::reshape_as;
  using torch::result_type;
  //using torch::retain_grad;
  using torch::rfft;
  using torch::rnn_relu;
  using torch::rnn_relu_cell;
  using torch::rnn_tanh;
  using torch::rnn_tanh_cell;
  using torch::roll;
  using torch::rot90;
  using torch::round;
  using torch::rrelu;
  using torch::rrelu_with_noise;
  using torch::rrelu_with_noise_backward;
  using torch::rsqrt;
  using torch::rsub;
  using torch::scalar_tensor;
  using torch::scatter;
  using torch::scatter_add;
  using torch::searchsorted;
  using torch::select;
  using torch::select_backward;
  using torch::selu;
  //using torch::set_data;
  using torch::sgn;
  using torch::sigmoid;
  using torch::sigmoid_backward;
  using torch::sign;
  using torch::signbit;
  using torch::silu;
  using torch::silu_backward;
  using torch::sin;
  using torch::sinh;
  using torch::size;
  using torch::slice;
  using torch::slice_backward;
  using torch::slogdet;
  using torch::slow_conv3d;
  using torch::slow_conv3d_backward;
  using torch::slow_conv3d_forward;
  using torch::slow_conv_dilated2d;
  using torch::slow_conv_dilated2d_backward;
  using torch::slow_conv_dilated3d;
  using torch::slow_conv_dilated3d_backward;
  using torch::slow_conv_transpose2d;
  using torch::slow_conv_transpose2d_backward;
  using torch::slow_conv_transpose3d;
  using torch::slow_conv_transpose3d_backward;
  using torch::smm;
  using torch::smooth_l1_loss;
  using torch::smooth_l1_loss_backward;
  using torch::soft_margin_loss;
  using torch::soft_margin_loss_backward;
  using torch::softmax;
  using torch::softplus;
  using torch::softplus_backward;
  using torch::softshrink;
  using torch::softshrink_backward;
  using torch::solve;
  using torch::sort;
  using torch::sparse_coo_tensor;
  //using torch::sparse_dim;
  //using torch::sparse_mask;
  using torch::split;
  using torch::split_with_sizes;
  using torch::sqrt;
  using torch::square;
  using torch::squeeze;
  using torch::sspaddmm;
  using torch::stack;
  using torch::std;
  using torch::std_mean;
  using torch::stft;
  using torch::stride;
  using torch::sub;
  using torch::subtract;
  using torch::sum;
  //using torch::sum_to_size;
  using torch::svd;
  using torch::symeig;
  using torch::t;
  using torch::take;
  using torch::take_backward;
  using torch::tan;
  using torch::tanh;
  using torch::tanh_backward;
  using torch::tensordot;
  using torch::thnn_conv2d;
  using torch::thnn_conv2d_backward;
  using torch::thnn_conv2d_forward;
  using torch::thnn_conv_depthwise2d;
  using torch::thnn_conv_depthwise2d_backward;
  using torch::thnn_conv_depthwise2d_forward;
  using torch::threshold;
  using torch::threshold_backward;
  //using torch::to;
  //using torch::to_dense;
  using torch::to_dense_backward;
  //using torch::to_mkldnn;
  using torch::to_mkldnn_backward;
  //using torch::to_sparse;
  using torch::topk;
  using torch::trace;
  using torch::trace_backward;
  using torch::transpose;
  using torch::trapz;
  using torch::triangular_solve;
  using torch::tril;
  using torch::tril_indices;
  using torch::triplet_margin_loss;
  using torch::triu;
  using torch::triu_indices;
  using torch::true_divide;
  using torch::trunc;
  //using torch::type_as;
  using torch::unbind;
  //using torch::unflatten;
  //using torch::unfold;
  using torch::unfold_backward;
  using torch::unique_consecutive;
  using torch::unique_dim;
  using torch::unique_dim_consecutive;
  using torch::unsafe_chunk;
  using torch::unsafe_split;
  using torch::unsafe_split_with_sizes;
  using torch::unsqueeze;
  using torch::upsample_bicubic2d;
  using torch::upsample_bicubic2d_backward;
  using torch::upsample_bilinear2d;
  using torch::upsample_bilinear2d_backward;
  using torch::upsample_linear1d;
  using torch::upsample_linear1d_backward;
  using torch::upsample_nearest1d;
  using torch::upsample_nearest1d_backward;
  using torch::upsample_nearest2d;
  using torch::upsample_nearest2d_backward;
  using torch::upsample_nearest3d;
  using torch::upsample_nearest3d_backward;
  using torch::upsample_trilinear3d;
  using torch::upsample_trilinear3d_backward;
  using torch::value_selecting_reduction_backward;
  //using torch::values;
  using torch::vander;
  using torch::var;
  using torch::var_mean;
  using torch::vdot;
  //using torch::view;
  //using torch::view_as;
  using torch::view_as_complex;
  using torch::view_as_real;
  using torch::vstack;
  using torch::where;
  using torch::zeros;
  using torch::zeros_like;
  
  //using torch::__iand__;
  //using torch::__ilshift__;
  //using torch::__ior__;
  //using torch::__irshift__;
  //using torch::__ixor__;
  
  using torch::_add_relu_;
  using torch::_add_relu_out;
  using torch::_addmv_impl_;
  using torch::_baddbmm_mkl_;
  //using torch::impl_index;
  using torch::_bmm_out;
  using torch::_cat_out;
  //using torch::_coalesced_;
  using torch::_compute_linear_combination_out;
  using torch::_cumprod_out;
  using torch::_cumsum_out;
  using torch::_index_copy_;
  using torch::_index_put_impl_;
  using torch::_logcumsumexp_out;
  using torch::_mkldnn_transpose_;
  using torch::_sobol_engine_ff_;
  using torch::_sobol_engine_initialize_state_;
  using torch::_sobol_engine_scramble_;
  
  //using torch::abs_;
  using torch::abs_out;
  //using torch::absolute_;
  using torch::absolute_out;
  //using torch::acos_;
  using torch::acos_out;
  //using torch::acosh_;
  using torch::acosh_out;
  using torch::adaptive_avg_pool2d_out;
  using torch::adaptive_avg_pool3d_backward_out;
  using torch::adaptive_avg_pool3d_out;
  using torch::adaptive_max_pool2d_backward_out;
  using torch::adaptive_max_pool3d_backward_out;
  //using torch::add_;
  using torch::add_out;
  //using torch::addbmm_;
  using torch::addbmm_out;
  //using torch::addcdiv_;
  using torch::addcdiv_out;
  //using torch::addcmul_;
  using torch::addcmul_out;
  //using torch::addmm_;
  using torch::addmm_out;
  using torch::addmv_;
  using torch::addmv_out;
  //using torch::addr_;
  using torch::addr_out;
  using torch::all_out;
  using torch::alpha_dropout_;
  using torch::amax_out;
  using torch::amin_out;
  using torch::angle_out;
  using torch::any_out;
  using torch::arange_out;
  //using torch::arccos_;
  using torch::arccos_out;
  //using torch::arccosh_;
  using torch::arccosh_out;
  //using torch::arcsin_;
  using torch::arcsin_out;
  //using torch::arcsinh_;
  using torch::arcsinh_out;
  //using torch::arctan_;
  using torch::arctan_out;
  //using torch::arctanh_;
  using torch::arctanh_out;
  //using torch::as_strided_;
  //using torch::asin_;
  using torch::asin_out;
  //using torch::asinh_;
  using torch::asinh_out;
  //using torch::atan2_;
  using torch::atan2_out;
  //using torch::atan_;
  using torch::atan_out;
  //using torch::atanh_;
  using torch::atanh_out;
  using torch::avg_pool2d_backward_out;
  using torch::avg_pool2d_out;
  using torch::avg_pool3d_backward_out;
  using torch::avg_pool3d_out;
  //using torch::baddbmm_;
  using torch::baddbmm_out;
  using torch::batch_norm_elemt_out;
  //using torch::bernoulli_;
  using torch::bernoulli_out;
  using torch::binary_cross_entropy_backward_out;
  using torch::binary_cross_entropy_out;
  //using torch::bitwise_and_;
  using torch::bitwise_and_out;
  //using torch::bitwise_not_;
  using torch::bitwise_not_out;
  //using torch::bitwise_or_;
  using torch::bitwise_or_out;
  //using torch::bitwise_xor_;
  using torch::bitwise_xor_out;
  using torch::bmm_out;
  using torch::bucketize_out;
  using torch::cat_out;
  //using torch::cauchy_;
  //using torch::ceil_;
  using torch::ceil_out;
  //using torch::celu_;
  using torch::cholesky_inverse_out;
  using torch::cholesky_out;
  using torch::cholesky_solve_out;
  //using torch::clamp_;
  //using torch::clamp_max_;
  using torch::clamp_max_out;
  //using torch::clamp_min_;
  using torch::clamp_min_out;
  using torch::clamp_out;
  //using torch::clip_;
  using torch::clip_out;
  using torch::col2im_backward_out;
  using torch::col2im_out;
  using torch::complex_out;
  using torch::conj_out;
  //using torch::copy_;
  //using torch::copy_sparse_to_sparse_;
  //using torch::cos_;
  using torch::cos_out;
  using torch::cosh_;
  using torch::cosh_out;
  using torch::cross_out;
  using torch::cumprod_out;
  using torch::cumsum_out;
  //using torch::deg2rad_;
  using torch::deg2rad_out;
  //using torch::detach_;
  using torch::diag_out;
  //using torch::digamma_;
  using torch::digamma_out;
  //using torch::div_;
  using torch::div_out;
  //using torch::divide_;
  using torch::divide_out;
  using torch::dot_out;
  //using torch::dropout_;
  using torch::dstack_out;
  //using torch::elu_;
  using torch::elu_backward_out;
  using torch::elu_out;
  //using torch::embedding_renorm_;
  using torch::empty_out;
  //using torch::eq_;
  using torch::eq_out;
  //using torch::erf_;
  using torch::erf_out;
  //using torch::erfc_;
  using torch::erfc_out;
  //using torch::erfinv_;
  using torch::erfinv_out;
  //using torch::exp2_;
  using torch::exp2_out;
  //using torch::exp_;
  using torch::exp_out;
  //using torch::expm1_;
  using torch::expm1_out;
  //using torch::exponential_;
  using torch::eye_out;
  //using torch::feature_alpha_dropout_;
  //using torch::feature_dropout_;
  //using torch::fill_;
  //using torch::fill_diagonal_;
  //using torch::fix_;
  using torch::fix_out;
  //using torch::floor_;
  //using torch::floor_divide_;
  using torch::floor_divide_out;
  using torch::floor_out;
  //using torch::fmod_;
  using torch::fmod_out;
  //using torch::frac_;
  using torch::frac_out;
  using torch::fractional_max_pool2d_backward_out;
  using torch::fractional_max_pool3d_backward_out;
  using torch::frobenius_norm_out;
  using torch::full_out;
  using torch::gather_out;
  //using torch::gcd_;
  using torch::gcd_out;
  //using torch::ge_;
  using torch::ge_out;
  //using torch::geometric_;
  using torch::ger_out;
  using torch::glu_backward_out;
  using torch::glu_out;
  //using torch::greater_;
  //using torch::greater_equal_;
  using torch::greater_equal_out;
  using torch::greater_out;
  //using torch::gt_;
  using torch::gt_out;
  //using torch::hardsigmoid_;
  using torch::hardsigmoid_out;
  //using torch::hardswish_;
  using torch::hardswish_out;
  //using torch::hardtanh_;
  using torch::hardtanh_backward_out;
  using torch::hardtanh_out;
  //using torch::heaviside_;
  using torch::heaviside_out;
  using torch::histc_out;
  using torch::hspmm_out;
  using torch::hstack_out;
  //using torch::hypot_;
  using torch::hypot_out;
  //using torch::i0_;
  using torch::i0_out;
  using torch::im2col_backward_out;
  using torch::im2col_out;
  //using torch::index_add_;
  //using torch::index_copy_;
  //using torch::index_fill_;
  //using torch::index_put_;
  using torch::index_select_out;
  using torch::inverse_out;
  using torch::isneginf_out;
  using torch::isposinf_out;
  using torch::l1_loss_backward_out;
  using torch::l1_loss_out;
  //using torch::lcm_;
  using torch::lcm_out;
  //using torch::le_;
  using torch::le_out;
  //using torch::leaky_relu_;
  using torch::leaky_relu_out;
  //using torch::lerp_;
  using torch::lerp_out;
  //using torch::less_;
  //using torch::less_equal_;
  using torch::less_equal_out;
  using torch::less_out;
  //using torch::lgamma_;
  using torch::lgamma_out;
  using torch::linalg_norm_out;
  using torch::linspace_out;
  //using torch::log10_;
  using torch::log10_out;
  //using torch::log1p_;
  using torch::log1p_out;
  //using torch::log2_;
  using torch::log2_out;
  //using torch::log_;
  //using torch::log_normal_;
  using torch::log_out;
  using torch::log_sigmoid_backward_out;
  using torch::log_sigmoid_out;
  using torch::logaddexp2_out;
  using torch::logaddexp_out;
  using torch::logcumsumexp_out;
  //using torch::logical_and_;
  using torch::logical_and_out;
  //using torch::logical_not_;
  using torch::logical_not_out;
  //using torch::logical_or_;
  using torch::logical_or_out;
  //using torch::logical_xor_;
  using torch::logical_xor_out;
  //using torch::logit_;
  using torch::logit_backward_out;
  using torch::logit_out;
  using torch::logspace_out;
  using torch::logsumexp_out;
  //using torch::lt_;
  using torch::lt_out;
  using torch::lu_solve_out;
  //using torch::masked_fill_;
  //using torch::masked_scatter_;
  using torch::masked_select_out;
  using torch::matmul_out;
  using torch::max_out;
  using torch::max_pool2d_with_indices_backward_out;
  using torch::max_pool3d_with_indices_backward_out;
  using torch::max_unpool2d_backward_out;
  using torch::max_unpool2d_out;
  using torch::max_unpool3d_backward_out;
  using torch::max_unpool3d_out;
  using torch::maximum_out;
  using torch::mean_out;
  using torch::min_out;
  using torch::minimum_out;
  using torch::mm_out;
  using torch::mse_loss_backward_out;
  using torch::mse_loss_out;
  //using torch::mul_;
  using torch::mul_out;
  using torch::multi_margin_loss_backward_out;
  using torch::multi_margin_loss_out;
  using torch::multilabel_margin_loss_backward_out;
  using torch::multilabel_margin_loss_out;
  using torch::multinomial_out;
  //using torch::multiply_;
  using torch::multiply_out;
  using torch::mv_out;
  //using torch::mvlgamma_;
  using torch::nanquantile_out;
  using torch::nansum_out;
  //using torch::ne_;
  using torch::ne_out;
  //using torch::neg_;
  using torch::neg_out;
  //using torch::negative_;
  using torch::negative_out;
  //using torch::nextafter_;
  using torch::nextafter_out;
  using torch::nll_loss2d_backward_out;
  using torch::nll_loss2d_out;
  using torch::nll_loss_backward_out;
  using torch::nll_loss_out;
  using torch::nonzero_out;
  using torch::norm_out;
  //using torch::normal_;
  using torch::normal_out;
  //using torch::not_equal_;
  using torch::not_equal_out;
  using torch::nuclear_norm_out;
  using torch::ones_out;
  using torch::orgqr_out;
  using torch::ormqr_out;
  using torch::outer_out;
  using torch::polar_out;
  //using torch::polygamma_;
  using torch::polygamma_out;
  //using torch::pow_;
  using torch::pow_out;
  using torch::prod_out;
  //using torch::put_;
  using torch::quantile_out;
  //using torch::rad2deg_;
  using torch::rad2deg_out;
  using torch::rand_out;
  using torch::randint_out;
  using torch::randn_out;
  //using torch::random_;
  using torch::randperm_out;
  using torch::range_out;
  //using torch::reciprocal_;
  using torch::reciprocal_out;
  using torch::reflection_pad1d_backward_out;
  using torch::reflection_pad1d_out;
  using torch::reflection_pad2d_backward_out;
  using torch::reflection_pad2d_out;
  //using torch::relu_;
  //using torch::remainder_;
  using torch::remainder_out;
  //using torch::rename_;
  //using torch::renorm_;
  using torch::renorm_out;
  using torch::replication_pad1d_backward_out;
  using torch::replication_pad1d_out;
  using torch::replication_pad2d_backward_out;
  using torch::replication_pad2d_out;
  using torch::replication_pad3d_backward_out;
  using torch::replication_pad3d_out;
  //using torch::requires_grad_;
  //using torch::resize_;
  //using torch::resize_as_;
  //using torch::round_;
  using torch::round_out;
  //using torch::rrelu_;
  //using torch::rrelu_with_noise_;
  using torch::rrelu_with_noise_out;
  //using torch::rsqrt_;
  using torch::rsqrt_out;
  //using torch::scatter_;
  //using torch::scatter_add_;
  using torch::searchsorted_out;
  //using torch::selu_;
  //using torch::set_;
  //using torch::set_quantizer_;
  //using torch::sgn_;
  using torch::sgn_out;
  //using torch::sigmoid_;
  using torch::sigmoid_backward_out;
  using torch::sigmoid_out;
  ////using torch::sign_;
  using torch::sign_out;
  using torch::signbit_out;
  //using torch::silu_;
  using torch::silu_out;
  //using torch::sin_;
  using torch::sin_out;
  //using torch::sinh_;
  using torch::sinh_out;
  using torch::slow_conv3d_out;
  using torch::slow_conv_transpose2d_out;
  using torch::slow_conv_transpose3d_out;
  using torch::smooth_l1_loss_backward_out;
  using torch::smooth_l1_loss_out;
  using torch::soft_margin_loss_backward_out;
  using torch::soft_margin_loss_out;
  using torch::softplus_backward_out;
  using torch::softplus_out;
  using torch::softshrink_backward_out;
  using torch::softshrink_out;
  //using torch::sparse_resize_;
  //using torch::sparse_resize_and_clear_;
  //using torch::sqrt_;
  using torch::sqrt_out;
  //using torch::square_;
  //using torch::squeeze_;
  using torch::sspaddmm_out;
  using torch::stack_out;
  using torch::std_out;
  //using torch::sub_;
  using torch::sub_out;
  //using torch::subtract_;
  using torch::subtract_out;
  using torch::sum_out;
  //using torch::t_;
  using torch::take_out;
  //using torch::tan_;
  using torch::tan_out;
  //using torch::tanh_;
  using torch::tanh_backward_out;
  using torch::tanh_out;
  using torch::thnn_conv2d_out;
  using torch::thnn_conv_depthwise2d_forward_out;
  using torch::thnn_conv_depthwise2d_out;
  //using torch::threshold_;
  using torch::threshold_out;
  //using torch::transpose_;
  //using torch::tril_;
  using torch::tril_out;
  //using torch::triu_;
  using torch::triu_out;
  //using torch::true_divide_;
  using torch::true_divide_out;
  //using torch::trunc_;
  using torch::trunc_out;
  //using torch::uniform_;
  //using torch::unsqueeze_;
  using torch::upsample_bicubic2d_backward_out;
  using torch::upsample_bicubic2d_out;
  using torch::upsample_bilinear2d_backward_out;
  using torch::upsample_bilinear2d_out;
  using torch::upsample_linear1d_backward_out;
  using torch::upsample_linear1d_out;
  using torch::upsample_nearest1d_backward_out;
  using torch::upsample_nearest1d_out;
  using torch::upsample_nearest2d_backward_out;
  using torch::upsample_nearest2d_out;
  using torch::upsample_nearest3d_backward_out;
  using torch::upsample_nearest3d_out;
  using torch::upsample_trilinear3d_backward_out;
  using torch::upsample_trilinear3d_out;
  using torch::var_out;
  using torch::vdot_out;
  using torch::vstack_out;
  //using torch::zero_;
  using torch::zeros_out;  
  
} // end namespace gismo

#ifndef GISMO_BUILD_LIB
#include GISMO_HPP_HEADER(gsTensor.hpp)
#endif
