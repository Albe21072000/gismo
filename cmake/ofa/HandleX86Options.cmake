#=============================================================================
# Handling of X86 / X86_64 options
#
# This is a two-step process:
#
# 1. Generate a list of compiler flags for the specific CPU
#
# 2. Apply compiler flags
#
#    2.1 Enable/disable features based on compiler capabilities
#
# 4. Set compiler-specific flags
#=============================================================================

include(ofa/AddCompilerFlag)
include(CheckIncludeFileCXX)

macro(OFA_HandleX86Options)

  # Special treatment for "native" flag
  if(TARGET_ARCHITECTURE STREQUAL "native")
    if(MSVC)
      # MSVC (on Windows)
      message(FATAL_ERROR, "[OFA] MSVC does not support \"native\" flag.")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Intel"
        OR CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM")
      if(WIN32)
        # Intel (on Windows)
        AddCompilerFlag("/QxHOST" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      else()
        # Intel (on Linux)
        AddCompilerFlag("-xHOST" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      endif()
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC"
        OR CMAKE_CXX_COMPILER_ID MATCHES "PGI")
      # NVidia HPC / PGI (on Linux/Windows
      AddCompilerFlag("-tp=native" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "SunPro")
      # Sun/Oracle Studio (on Linux/Sun OS)
      AddCompilerFlag("-native" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")
      # Cray (on Linux)
      message(FATAL_ERROR, "[OFA] Cray compiler does not support \"native\" flag.")
    else()
      # Others: GNU, Clang and variants
      _my_find(OFA_ARCHITECTURE_FLAGS "-march=native" _found)
      if(NOT _found)
        AddCompilerFlag("-march=native" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      endif()
    endif()
    return()
  endif()
  
  # Step 1: Generate a list of compiler flags for the specific CPU
  set(_march_flag_list)
  set(_available_extension_list)
  
  # Define macros for Intel
  macro(_nehalem)
    list(APPEND _march_flag_list "nehalem")
    list(APPEND _march_flag_list "corei7")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4.1" "sse4.2" "popcnt")
  endmacro()
  macro(_westmere)
    list(APPEND _march_flag_list "westmere")
    _nehalem()
    list(APPEND _available_extension_list "aes" "pclmul")
  endmacro()
  macro(_sandybridge)
    list(APPEND _march_flag_list "sandybridge")
    list(APPEND _march_flag_list "corei7-avx")
    _westmere()
    list(APPEND _available_extension_list "avx")
  endmacro()
  macro(_ivybridge)
    list(APPEND _march_flag_list "ivybridge")
    list(APPEND _march_flag_list "core-avx-i")
    _sandybridge()
    list(APPEND _available_extension_list "rdrnd" "f16c" "fsgsbase")
  endmacro()
  macro(_haswell)
    list(APPEND _march_flag_list "haswell")
    list(APPEND _march_flag_list "core-avx2")
    _ivybridge()
    list(APPEND _available_extension_list "avx2" "fma" "bmi" "bmi2")
  endmacro()
  macro(_broadwell)
    list(APPEND _march_flag_list "broadwell")
    _haswell()
    list(APPEND _available_extension_list "rdseed" "adcx" "prfchw")
  endmacro()
  macro(_skylake)
    list(APPEND _march_flag_list "skylake")
    _broadwell()
    list(APPEND _available_extension_list "clflushopt" "xsavec" "xsaves")
  endmacro()
  macro(_skylake_avx512)
    list(APPEND _march_flag_list "skylake-avx512")
    _skylake()
    list(APPEND _available_extension_list "avx512bw" "avx512cd" "avx512dq" "avx512f" "avx512vl" "clwb" "pku")
  endmacro()
  macro(_cascadelake)
    list(APPEND _march_flag_list "cascadelake")
    _skylake_avx512()
    list(APPEND _available_extension_list "avx512vnni")
  endmacro()
  macro(_cooperlake)
    list(APPEND _march_flag_list "cooperlake")
    _cascadelake()
    list(APPEND _available_extension_list "avx512bf16")
  endmacro()
  macro(_cannonlake)
    list(APPEND _march_flag_list "cannonlake")
    _skylake()
    list(APPEND _available_extension_list "avx512bw" "avx512cd" "avx512dq" "avx512f" "avx512vl" "clwb" "pku" "avx512ifma" "avx512vbmi" "sha" "umip")
  endmacro()
  macro(_icelake)
    list(APPEND _march_flag_list "icelake-client")
    _cannonlake()
    list(APPEND _available_extension_list "avx512bitalg" "avx512vbmi2" "avx512vnni" "avx512vpopcntdq" "clwb" "gfni" "rdpid" "vaes" "vpclmulqdq")
  endmacro()
  macro(_icelake_avx512)
    list(APPEND _march_flag_list "icelake-server")
    _icelake()
    list(APPEND _available_extension_list "pconfig" "wbnoinvd")
  endmacro()
  macro(_tigerlake)
    list(APPEND _march_flag_list "tigerlake")
    _icelake()
    list(APPEND _available_extension_list "avx512vp2intersect" "keylocker" "movdir64b" "movdiri" "pconfig" "wbnoinvd")
  endmacro()
  macro(_alderlake)
    list(APPEND _march_flag_list "alderlake")
    _broadwell()
    list(APPEND _available_extension_list "avxvnni" "cldemote" "clwb" "gfni" "hreset" "kl" "lzcnt" "movdir64b" "movdiri" "pconfig" "pku" "ptwrite" "rdpid" "serialize" "sgx" "umip" "vaes" "vpclmulqdq" "waitpkg" "widekl" "xsave" "xsavec" "xsaveopt" "xsaves")
  endmacro()
  macro(_sapphirerapids)
    list(APPEND _march_flag_list "sapphirerapids")
    _skylake_avx512()
    list(APPEND _available_extension_list "amx-bf16" "amx-int8" "amx-tile" "avxvnni" "avx512bf16" "avx512vnni" "avx512vp2intersect" "cldemote" "enqcmd" "movdir64b" "movdiri" "ptwrite" "serialize" "tsxldtrk" "uintr" "waitpkg")
  endmacro()
  macro(_rocketlake)
    list(APPEND _march_flag_list "rocketlake")
    _skylake_avx512()
    list(APPEND _available_extension_list "avx512bitalg" "avx512ifma" "avx512vbmi" "avx512vbmi2" "avx512vnni" "avx512vpopcntdq" "gfni" "rdpid" "sha" "umip" "vaes" "vpclmulqdq")
  endmacro()
  macro(_knightslanding)
    list(APPEND _march_flag_list "knl")
    _broadwell()
    list(APPEND _available_extension_list "avx512f" "avx512pf" "avx512er" "avx512cd")
  endmacro()
  macro(_knightsmill)
    list(APPEND _march_flag_list "knm")
    _broadwell()
    list(APPEND _available_extension_list "avx512f" "avx512pf" "avx512er" "avx512cd" "avx5124fmaps" "avx5124vnni" "avx512vpopcntdq")
  endmacro()
  macro(_silvermont)
    list(APPEND _march_flag_list "silvermont")
    _westmere()
    list(APPEND _available_extension_list "rdrnd")
  endmacro()
  macro(_goldmont)
    list(APPEND _march_flag_list "goldmont")
    _silvermont()
    list(APPEND _available_extension_list "rdseed")
  endmacro()
  macro(_goldmont_plus)
    list(APPEND _march_flag_list "goldmont-plus")
    _goldmont()
    list(APPEND _available_extension_list "rdpid")
  endmacro()
  macro(_tremont)
    list(APPEND _march_flag_list "tremont")
    _goldmont_plus()
  endmacro()

  # TODO: Define similar macros for AMD

  # Intel
  if(TARGET_ARCHITECTURE STREQUAL "core")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3")
  elseif(TARGET_ARCHITECTURE STREQUAL "merom")
    list(APPEND _march_flag_list "merom")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")
  elseif(TARGET_ARCHITECTURE STREQUAL "penryn")
    list(APPEND _march_flag_list "penryn")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")
    message(STATUS "[OFA] Sadly the Penryn architecture exists in variants with SSE4.1 and without SSE4.1.")
    if(_cpu_flags MATCHES "sse4_1")
      message(STATUS "[OFA] SSE4.1: enabled (auto-detected from this computer's CPU flags)")
      list(APPEND _available_extension_list "sse4.1")
    else()
      message(STATUS "[OFA] SSE4.1: disabled (auto-detected from this computer's CPU flags)")
    endif()
  elseif(TARGET_ARCHITECTURE STREQUAL "knm")
    _knightsmill()
  elseif(TARGET_ARCHITECTURE STREQUAL "knl")
    _knightslanding()
  elseif(TARGET_ARCHITECTURE STREQUAL "rocketlake")
    _rocketlake()
  elseif(TARGET_ARCHITECTURE STREQUAL "sapphirerapids")
    _sapphirerapids()
  elseif(TARGET_ARCHITECTURE STREQUAL "alderlake")
    _alderlake()
  elseif(TARGET_ARCHITECTURE STREQUAL "tigerlake")
    _tigerlake()
  elseif(TARGET_ARCHITECTURE STREQUAL "icelake")
    _icelake()
  elseif(TARGET_ARCHITECTURE STREQUAL "icelake-xeon" OR TARGET_ARCHITECTURE STREQUAL "icelake-avx512")
    _icelake_avx512()
  elseif(TARGET_ARCHITECTURE STREQUAL "cannonlake")
    _cannonlake()
  elseif(TARGET_ARCHITECTURE STREQUAL "cooperlake")
    _cooperlake()
  elseif(TARGET_ARCHITECTURE STREQUAL "cascadelake")
    _cascadelake()
  elseif(TARGET_ARCHITECTURE STREQUAL "kabylake")
    _skylake()
  elseif(TARGET_ARCHITECTURE STREQUAL "skylake-xeon" OR TARGET_ARCHITECTURE STREQUAL "skylake-avx512")
    _skylake_avx512()
  elseif(TARGET_ARCHITECTURE STREQUAL "skylake")
    _skylake()
  elseif(TARGET_ARCHITECTURE STREQUAL "broadwell")
    _broadwell()
  elseif(TARGET_ARCHITECTURE STREQUAL "haswell")
    _haswell()
  elseif(TARGET_ARCHITECTURE STREQUAL "ivybridge")
    _ivybridge()
  elseif(TARGET_ARCHITECTURE STREQUAL "sandybridge")
    _sandybridge()
  elseif(TARGET_ARCHITECTURE STREQUAL "westmere")
    _westmere()
  elseif(TARGET_ARCHITECTURE STREQUAL "nehalem")
    _nehalem()
  elseif(TARGET_ARCHITECTURE STREQUAL "tremont")
    _tremont()
  elseif(TARGET_ARCHITECTURE STREQUAL "goldmont-plus")
    _goldmont_plus()
  elseif(TARGET_ARCHITECTURE STREQUAL "goldmont")
    _goldmont()
  elseif(TARGET_ARCHITECTURE STREQUAL "silvermont")
    _silvermont()
  elseif(TARGET_ARCHITECTURE STREQUAL "bonnell")
    list(APPEND _march_flag_list "bonnell")
    list(APPEND _march_flag_list "atom")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")
  elseif(TARGET_ARCHITECTURE STREQUAL "atom")
    list(APPEND _march_flag_list "atom")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")

  # AMD
  elseif(TARGET_ARCHITECTURE STREQUAL "k8")
    list(APPEND _march_flag_list "k8")
    list(APPEND _available_extension_list "sse" "sse2")
  elseif(TARGET_ARCHITECTURE STREQUAL "k8-sse3")
    list(APPEND _march_flag_list "k8-sse3")
    list(APPEND _march_flag_list "k8")
    list(APPEND _available_extension_list "sse" "sse2" "sse3")
  elseif(TARGET_ARCHITECTURE STREQUAL "amd16h")
    list(APPEND _march_flag_list "btver2")
    list(APPEND _march_flag_list "btver1")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "f16c")
  elseif(TARGET_ARCHITECTURE STREQUAL "amd14h")
    list(APPEND _march_flag_list "btver1")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "zen3")
    list(APPEND _march_flag_list "znver2")
    list(APPEND _march_flag_list "znver1")
    _skylake()
    list(APPEND _available_extension_list "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "zen2")
    list(APPEND _march_flag_list "znver2")
    list(APPEND _march_flag_list "znver1")
    _skylake()
    list(APPEND _available_extension_list "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "zen")
    list(APPEND _march_flag_list "znver1")
    _skylake()
    list(APPEND _available_extension_list "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "excavator")
    list(APPEND _march_flag_list "bdver4")
    list(APPEND _march_flag_list "bdver3")
    list(APPEND _march_flag_list "bdver2")
    list(APPEND _march_flag_list "bdver1")
    list(APPEND _march_flag_list "bulldozer")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "avx2" "xop" "fma4" "fma" "f16c" "bmi" "bmi2" "rdrnd")
  elseif(TARGET_ARCHITECTURE STREQUAL "steamroller")
    list(APPEND _march_flag_list "bdver3")
    list(APPEND _march_flag_list "bdver2")
    list(APPEND _march_flag_list "bdver1")
    list(APPEND _march_flag_list "bulldozer")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4" "fma" "f16c" "bmi")
  elseif(TARGET_ARCHITECTURE STREQUAL "piledriver")
    list(APPEND _march_flag_list "bdver2")
    list(APPEND _march_flag_list "bdver1")
    list(APPEND _march_flag_list "bulldozer")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4" "fma" "f16c" "bmi")
  elseif(TARGET_ARCHITECTURE STREQUAL "interlagos")
    list(APPEND _march_flag_list "bdver1")
    list(APPEND _march_flag_list "bulldozer")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4")
  elseif(TARGET_ARCHITECTURE STREQUAL "bulldozer")
    list(APPEND _march_flag_list "bdver1")
    list(APPEND _march_flag_list "bulldozer")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4")
  elseif(TARGET_ARCHITECTURE STREQUAL "barcelona")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "istanbul")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")
  elseif(TARGET_ARCHITECTURE STREQUAL "magny-cours")
    list(APPEND _march_flag_list "barcelona")
    list(APPEND _march_flag_list "core2")
    list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")

  # Others
  elseif(TARGET_ARCHITECTURE STREQUAL "generic")
    list(APPEND _march_flag_list "generic")
  elseif(TARGET_ARCHITECTURE STREQUAL "none")
    # add this clause to remove it from the else clause

  else()
    message(FATAL_ERROR "[OFA] Unknown target architecture: \"${TARGET_ARCHITECTURE}\". Please set TARGET_ARCHITECTURE to a supported value.")
  endif()

  list(SORT _available_extension_list)
  list(REMOVE_DUPLICATES _available_extension_list)
  
  if(OFA_VERBOSE)
    string(REPLACE ";"  ", " _str "${_march_flag_list}")
    string(TOUPPER ${_str} _str)
    message(STATUS "[OFA] CPU architectures: " ${_str})
    string(REPLACE ";"  ", " _str "${_available_extension_list}")
    string(TOUPPER ${_str} _str)
    message(STATUS "[OFA] Extensions (available): ${_str}")
  endif()
      
  # Step 2: Apply compiler flags
  if(NOT TARGET_ARCHITECTURE STREQUAL "none")
    set(_check_extension_list)
    set(_disable_extension_list)
    set(_enable_extension_list)

    # Step 2.1: Enable/disable features based on compiler capabilities
    file(READ ${CMAKE_SOURCE_DIR}/cmake/ofa/IntrinsicsX86.txt _intrinsics)
    string(REPLACE ";" "|" _intrinsics "${_intrinsics}")
    string(REPLACE "\n" ";" _intrinsics "${_intrinsics}")
    foreach (_intrinsic ${_intrinsics})
      if ("${_intrinsic}" MATCHES "^#" ) # Skip comment
        continue()
      endif()
      string(REPLACE "|" ";" _intrinsic "${_intrinsic}")
      list(GET _intrinsic 0 _intrinsic_flags)
      list(GET _intrinsic 1 _intrinsic_header)
      list(GET _intrinsic 2 _intrinsic_name)
      list(GET _intrinsic 3 _intrinsic_params)

      string(REPLACE "," ";" _intrinsic_flags "${_intrinsic_flags}")
      list(GET _intrinsic_flags 0 _flag)
      string(REPLACE ";" " -m" _intrinsic_flags "-m${_intrinsic_flags}")
      list(APPEND _check_extension_list "${_flag}")
      
      # Check if include file is available
      set(_resultVar "HAVE_${_intrinsic_header}")
      string(REPLACE "." "_" _resultVar "${_resultVar}")
      check_include_file_cxx(
        ${_intrinsic_header}
        ${_resultVar}
        ${_intrinsic_flags})
      if(NOT ${_resultVar})
        set(_useVar "USE_${_flag}")
        string(TOUPPER "${_useVar}" _useVar)
        string(REPLACE "." "_" _useVar "${_useVar}")
        message(STATUS "[OFA] Disabling ${_useVar} because ${_intrinsic_header} is missing")
        set(${_useVar} false CACHE BOOL "Use ${_flag} extension." FORCE)
        mark_as_advanced(${_useVar})
        continue()
      endif()

      # Check if compiler supports flag and can compile code
      set(_resultVar "HAVE_${_flag}_${_intrinsic_name}")
      string(REPLACE "." "_" _resultVar "${_resultVar}")
      set(CMAKE_REQUIRED_FLAGS "${_intrinsic_flags}")
      check_cxx_source_compiles(
        "#include<${_intrinsic_header}>
         int main() {
           ${_intrinsic_name}(${_intrinsic_params});
           return 0;
         }"
        ${_resultVar})
      set(_useVar "USE_${_flag}")
      string(TOUPPER "${_useVar}" _useVar)
      string(REPLACE "." "_" _useVar "${_useVar}")
      if (NOT ${_resultVar})
        message(STATUS "[OFA] Disabling ${_useVar} because -m${_flag} is not supported by compiler and/or ${_intrinsic_name} intrinsics fails to compile")
        set(${_useVar} false CACHE BOOL "Use ${_flag} extension." FORCE)
        mark_as_advanced(${_useVar})
      else()
        set(${_useVar} true CACHE BOOL "Use ${_flag} extension.")
        mark_as_advanced(${_useVar})
      endif()
    endforeach()

    # Generate lists of enabled/disabled flags
    list(REMOVE_DUPLICATES _check_extension_list)
    foreach(_flag ${_check_extension_list})
      _my_find(_available_extension_list "${_flag}" _found)
      set(_useVar "USE_${_flag}")
      string(TOUPPER "${_useVar}" _useVar)
      string(REPLACE "." "_" _useVar "${_useVar}")     
      if(_found AND ${_useVar})
        list(APPEND _enable_extension_list "${_flag}")        
      else()
        list(APPEND _disable_extension_list "${_flag}")
      endif()
    endforeach()
    
    if(OFA_VERBOSE)
      string(REPLACE ";"  ", " _str "${_enable_extension_list}")
      string(TOUPPER ${_str} _str)
      message(STATUS "[OFA] Extensions (enabled): ${_str}")
      string(REPLACE ";"  ", " _str "${_disable_extension_list}")
      string(TOUPPER ${_str} _str)
      message(STATUS "[OFA] Extensions (disabled): ${_str}")
    endif()

if(FALSE)    
    set(_generic_broken false)
    set(_amx_broken false)
    set(_avxvnni_broken false)

    
    if(DEFINED OFA_SSE_INTRINSICS_BROKEN AND OFA_SSE_INTRINSICS_BROKEN)
      message(STATUS "SSE disabled because of old/broken toolchain")
      set(_sse_broken true)
      set(_avx_broken true)
      set(_avx2_broken true)
      set(_avx512_broken true)
      set(_fma4_broken true)
      set(_xop_broken true)
    elseif(DEFINED OFA_AVX_INTRINSICS_BROKEN AND OFA_AVX_INTRINSICS_BROKEN)
      message(STATUS "AVX disabled because of old/broken toolchain")
      set(_sse_broken false)
      set(_avx_broken true)
      set(_avx2_broken true)
      set(_avx512_broken true)
      set(_fma4_broken true)
      set(_xop_broken true)
    else()
      set(_sse_broken false)
      set(_avx_broken false)
      if(DEFINED OFA_FMA4_INTRINSICS_BROKEN AND OFA_FMA4_INTRINSICS_BROKEN)
        message(STATUS "FMA4 disabled because of old/broken toolchain")
        set(_fma4_broken true)
      else()
        set(_fma4_broken false)
      endif()
      if(DEFINED OFA_XOP_INTRINSICS_BROKEN AND OFA_XOP_INTRINSICS_BROKEN)
        message(STATUS "XOP disabled because of old/broken toolchain")
        set(_xop_broken true)
      else()
        set(_xop_broken false)
      endif()
      if(DEFINED OFA_AVX2_INTRINSICS_BROKEN AND OFA_AVX2_INTRINSICS_BROKEN)
        message(STATUS "AVX2 disabled because of old/broken toolchain")
        set(_avx2_broken true)
      else()
        set(_avx2_broken false)
      endif()
      if(DEFINED OFA_AVX512_INTRINSICS_BROKEN AND OFA_AVX512_INTRINSICS_BROKEN)
        message(STATUS "AVX512 disabled because of old/broken toolchain")
        set(_avx512_broken true)
      else()
        set(_avx512_broken false)
      endif()
    endif()

    # Enable/disable macro
    macro(_enable_or_disable _name _flag _documentation _broken)
      if(_broken)
        set(_found false)
      else()
        _my_find(_available_extension_list "${_flag}" _found)
      endif()
      set(USE_${_name} ${_found} CACHE BOOL "${documentation}" ${_force})
      mark_as_advanced(USE_${_name})
      if(USE_${_name})
        list(APPEND _enable_extension_list "${_flag}")
      else()
        list(APPEND _disable_extension_list "${_flag}")
      endif()
    endmacro()
    
    # Enable/disable features
    _enable_or_disable(AES "aes" "Use AES." _generic_broken)
    _enable_or_disable(AMX-BF16 "amx-bf16" "Use AMX-BF16." _amx_broken)
    _enable_or_disable(AMX-INT8 "amx-int8" "Use AMX-INT8." _amx_broken)
    _enable_or_disable(AMX-TILE "amx-tile" "Use AMX-TILE." _amx_broken)
    _enable_or_disable(AVX "avx" "Use AVX. This will all floating-point vector sizes relative to SSE." _avx_broken)
    _enable_or_disable(AVX-VNNI "avx-vnni" "Use AVX-VNNI." _avxvnni_broken)
    _enable_or_disable(AVX2 "avx2" "Use AVX2. This will double all of the vector sizes relative to SSE." _avx2_broken)
    _enable_or_disable(AVX5124FMAPS "avx5124fmaps" "Use AVX5124FMAPS." _avx512_broken)
    _enable_or_disable(AVX5124VNNIW "avx5124vnniw" "Use AVX5124VNNIW." _avx512_broken)
    _enable_or_disable(AVX512BF16 "avx512bf16" "Use AVX512BF16." _avx512_broken)
    _enable_or_disable(AVX512BITALG "avx512bitalg" "Use AVX512BITALG." _avx512_broken)
    _enable_or_disable(AVX512BW "avx512bw" "Use AVX512BW." _avx512_broken)
    _enable_or_disable(AVX512CD "avx512cd" "Use AVX512CD." _avx512_broken)
    _enable_or_disable(AVX512DQ "avx512dq" "Use AVX512DQ." _avx512_broken)
    _enable_or_disable(AVX512ER "avx512er" "Use AVX512ER. This enables exponential and reciprocal instructions." _avx512_broken)
    _enable_or_disable(AVX512F "avx512f" "Use AVX512F. This will double all floating-point vector sizes relative to AVX2." _avx512_broken)
    _enable_or_disable(AVX512IFMA "avx512ifma" "Use AVX512IFMA." _avx512_broken)
    _enable_or_disable(AVX512PF "avx512pf" "Use AVX512PF. This enables prefetch instructions for gathers and scatters." _avx512_broken)
    _enable_or_disable(AVX512VBMI "avx512vbmi" "Use AVX512VBMI." _avx512_broken)
    _enable_or_disable(AVX512VBMI2 "avx512vbmi2" "Use AVX512VBMI2." _avx512_broken)
    _enable_or_disable(AVX512VL "avx512vl" "Use AVX512VL. This enables 128- and 256-bit vector length instructions with EVEX coding (improved write-masking & more vector registers)." _avx2_broken)
    _enable_or_disable(AVX512VNNI "avx512vnni" "Use AVX512VNNI." _avx512_broken)
    _enable_or_disable(AVX512VP2INTERSECT "avx512vp2intersect" "Use AVX512VP2INTERSECT." _avx512_broken)
    _enable_or_disable(AVX512VPOPCNTDQ  "avx512vpopcntdq " "Use AVX512VPOPCNTDQ ." _avx512_broken)
    _enable_or_disable(AVX512VPOPCNTDQ "avx512vpopcntdq" "Use AVX512VPOPCNTDQ." _avx512_broken)
    _enable_or_disable(BMI "bmi2" "Use BMI." _avx_broken)
    _enable_or_disable(BMI2 "bmi2" "Use BMI2." _avx_broken)
    _enable_or_disable(CLDEMOTE "cldemote" "Use CLDEMOTE." _generic_broken)
    _enable_or_disable(CLFLUSHOPT "clflushopt" "Use CLFLUSHOPT." _generic_broken)
    _enable_or_disable(CLWB "clwb" "Use CLWB." _generic_broken)
    _enable_or_disable(ENQCMD "enqcmd" "Use ENQCMD." _generic_broken)
    _enable_or_disable(F16C "f16c" "Use F16C." _xop_broken)
    _enable_or_disable(FMA "fma" "Use FMA." _avx_broken)
    _enable_or_disable(FMA4 "fma4" "Use FMA4." _fma4_broken)
    _enable_or_disable(FSGSBASE "fsgsbase" "Use FSGSBASE." _generic_broken)
    _enable_or_disable(GFNI "gfni" "Use GFNI." _avx512_broken)
    _enable_or_disable(HRESET "hreset" "Use ." _avx512_broken)
    _enable_or_disable(LZCNT "lzcnt" "Use LZCNT." _sse_broken)
    _enable_or_disable(MOVDIR64B "movdir64b" "Use MOVDIR64B." _generic_broken)
    _enable_or_disable(MOVDIRI "movdiri" "Use MOVDIRI." _generic_broken)
    _enable_or_disable(PCLMUL "pclmul" "Use PCLMUL." _generic_broken)
    _enable_or_disable(PCONFIG "pconfig" "Use PCONFIG." _generic_broken)
    _enable_or_disable(PKU "pku" "Use PKU." _generic_broken)
    _enable_or_disable(POPCNT "popcnt" "Use POPCNT." _sse_broken)
    _enable_or_disable(PREFETCHWT1 "prefetchwt1" "Use PREFETCHWT1." _generic_broken)
    _enable_or_disable(PRFCHW "prfchw" "Use PRFCHW." _generic_broken)
    _enable_or_disable(PTWRITE "ptwrite" "Use PTWRITE." _generic_broken)
    _enable_or_disable(RDPID  "rdpid " "Use RDPID ." _generic_broken)
    _enable_or_disable(RDRND "rdrnd" "Use RDRND." _generic_broken)
    _enable_or_disable(RDSEED "rdseed" "Use RDSEED." _generic_broken)
    _enable_or_disable(SERIALIZE "serialize" "Use SERIALIZE." _generic_broken)
    _enable_or_disable(SGX "sgx" "Use SGX." _generic_broken)
    _enable_or_disable(SHA "sha" "Use SHA." _generic_broken)
    _enable_or_disable(SSE2 "sse2" "Use SSE2. If SSE2 instructions are not enabled the SSE implementation will be disabled." _sse_broken)
    _enable_or_disable(SSE3 "sse3" "Use SSE3. If SSE3 instructions are not enabled they will be emulated." _sse_broken)
    _enable_or_disable(SSE4_1 "sse4.1" "Use SSE4.1. If SSE4.1 instructions are not enabled they will be emulated." _sse_broken)
    _enable_or_disable(SSE4_2 "sse4.2" "Use SSE4.2. If SSE4.2 instructions are not enabled they will be emulated." _sse_broken)
    _enable_or_disable(SSE4a "sse4a" "Use SSE4a. If SSE4a instructions are not enabled they will be emulated." _sse_broken)
    _enable_or_disable(SSSE3 "ssse3" "Use SSSE3. If SSSE3 instructions are not enabled they will be emulated." _sse_broken)
    _enable_or_disable(TSXLDTRK "tsxldtrk" "Use TSXLDTRK." _generic_broken)
    _enable_or_disable(VAES "vaes" "Use VAES." _avx512_broken)
    _enable_or_disable(VPCLMULQDQ "vpclmulqdq" "Use VPCLMULQDQ." _avx512_broken)
    _enable_or_disable(WAITPKG "waitpkg" "Use WAITPKG." _generic_broken)
    _enable_or_disable(WBNOINVD "wbnoinvd" "Use WBNOINVD." _generic_broken)
    _enable_or_disable(XOP "xop" "Use XOP." _xop_broken)
    _enable_or_disable(XSAVE "xsave" "Use XSAVE." _generic_broken)
    _enable_or_disable(XSAVEC "xsavec" "Use XSAVEC." _generic_broken)
    _enable_or_disable(XSAVEOPT "xsaveopt" "Use XSAVEOPT." _generic_broken)
    _enable_or_disable(XSAVES "xsaves" "Use XSAVES." _generic_broken)   
endif(FALSE)
  
    # Add compiler flags
    if(MSVC AND MSVC_VERSION GREATER 1700)
      _my_find(_enable_extension_list "avx512f" _found)
      if(_found)
        AddCompilerFlag("/arch:AVX512" CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _found)
      endif()
      if(NOT _found)
        _my_find(_enable_extension_list "avx2" _found)
        if(_found)
          AddCompilerFlag("/arch:AVX2" CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _found)
        endif()
      endif()
      if(NOT _found)
        _my_find(_enable_extension_list "avx" _found)
        if(_found)
          AddCompilerFlag("/arch:AVX" CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _found)
        endif()
      endif()
      if(NOT _found)
        _my_find(_enable_extension_list "sse2" _found)
        if(_found)
          AddCompilerFlag("/arch:SSE2" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        endif()
      endif()
      if(NOT _found)
        _my_find(_enable_extension_list "sse" _found)
        if(_found)
          AddCompilerFlag("/arch:SSE" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        endif()
      endif()
      foreach(_flag ${_enable_extension_list})
        string(TOUPPER "${_flag}" _flag)
        string(REPLACE "." "_" _flag "__${_flag}__")
        add_definitions("-D${_flag}")
      endforeach(_flag)

    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Intel"
        OR CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM")
      if(WIN32)
        # Intel (on Windows)
        set(OFA_map_knl "-QxKNL;-QxMIC-AVX512")
        set(OFA_map_knm "-QxKNM;-QxMIC-AVX512")
        set(OFA_map_rocketlake "-QxROCKETLAKE;-QxCORE-AVX512")
        set(OFA_map_sapphirerapids "-QxSAPPHIRERAPIDS;-QxCORE-AVX512")
        set(OFA_map_alderlake "-QxALDERLAKE;-QxCORE-AVX512")
        set(OFA_map_tigerlake "-QxTIGERLAKE;-QxCORE-AVX512")
        set(OFA_map_icelake-server "-QxICELAKE-SERVER;-QxCORE-AVX512")
        set(OFA_map_icelake-avx512 "-QxICELAKE-SERVER;-QxCORE-AVX512")
        set(OFA_map_icelake-client "-QxICELAKE-CLIENT;-QxCORE-AVX512")
        set(OFA_map_icelake "-QxICELAKE-CLIENT;-QxCORE-AVX512")
        set(OFA_map_cannonlake "-QxCANNONLAKE;-QxCORE-AVX512")
        set(OFA_map_cooperlake "-QxCOOPERLAKE;-QxCORE-AVX512")
        set(OFA_map_cascadelake "-QxCASCADELAKE;-QxCORE-AVX512")
        set(OFA_map_skylake-avx512 "-QxSKYLAKE-AVX512;-QxCORE-AVX512")
        set(OFA_map_skylake "-QxSKYLAKE;-QxCORE-AVX2")
        set(OFA_map_broadwell "-QxBROADWELL;-QxCORE-AVX2")
        set(OFA_map_haswell "-QxHASWELL;-QxCORE-AVX2")
        set(OFA_map_ivybridge "-QxIVYBRIDGE;-QxCORE-AVX-I")
        set(OFA_map_sandybridge "-QxSANDYBRIDGE;-QxAVX")
        set(OFA_map_westmere "-QxSSE4.2")
        set(OFA_map_nehalem "-QxSSE4.2")
        set(OFA_map_penryn "-QxSSSE3")
        set(OFA_map_merom "-QxSSSE3")
        set(OFA_map_core2 "-QxSSE3")
        set(_ok FALSE)
      else()
        # Intel (in Linux)
        set(OFA_map_knl "-xKNL;-xMIC-AVX512")
        set(OFA_map_knm "-xKNM;-xMIC-AVX512")
        set(OFA_map_rocketlake "-xROCKETLAKE;-xCORE-AVX512")
        set(OFA_map_sapphirerapids "-xSAPPHIRERAPIDS;-xCORE-AVX512")
        set(OFA_map_alderlake "-xALDERLAKE;-xCORE-AVX512")
        set(OFA_map_tigerlake "-xTIGERLAKE;-xCORE-AVX512")
        set(OFA_map_icelake-server "-xICELAKE-SERVER;-xCORE-AVX512")
        set(OFA_map_icelake-avx512 "-xICELAKE-SERVER;-xCORE-AVX512")
        set(OFA_map_icelake-client "-xICELAKE-CLIENT;-xCORE-AVX512")
        set(OFA_map_icelake "-xICELAKE-CLIENT;-xCORE-AVX512")
        set(OFA_map_cannonlake "-xCANNONLAKE;-xCORE-AVX512")
        set(OFA_map_cooperlake "-xCOOPERLAKE;-xCORE-AVX512")
        set(OFA_map_cascadelake "-xCASCADELAKE;-xCORE-AVX512")
        set(OFA_map_skylake-avx512 "-xSKYLAKE-AVX512;-xCORE-AVX512")
        set(OFA_map_skylake "-xSKYLAKE;-xCORE-AVX2")
        set(OFA_map_broadwell "-xBROADWELL;-xCORE-AVX2")
        set(OFA_map_haswell "-xHASWELL;-xCORE-AVX2")
        set(OFA_map_ivybridge "-xIVYBRIDGE;-xCORE-AVX-I")
        set(OFA_map_sandybridge "-xSANDYBRIDGE;-xAVX")
        set(OFA_map_westmere "-xSSE4.2")
        set(OFA_map_nehalem "-xSSE4.2")
        set(OFA_map_penryn "-xSSSE3")
        set(OFA_map_merom "-xSSSE3")
        set(OFA_map_core2 "-xSSE3")
        set(_ok FALSE)
      endif()

      message(${_march_flag_list})
      foreach(_arch ${_march_flag_list})
        message("arch ${_arch}")
        if(DEFINED OFA_map_${_arch})
          message("${OFA_map_${_arch}}")
          foreach(_flag ${OFA_map_${_arch}})
            message("flag ${_flag}")
            AddCompilerFlag(${_flag} CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _ok)
            if(_ok)
              message("OKAY")
              break()
            endif()
          endforeach()
          if(_ok)
            break()
          endif()
        endif()
      endforeach()
      if(NOT _ok)
        # This is the Intel compiler, so SSE2 is a very reasonable baseline.
        message(STATUS "[OFA] Did not recognize the requested architecture flag ${arch}, falling back to SSE2")
        if(WIN32)
          AddCompilerFlag("-QxSSE2" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        else()
          AddCompilerFlag("-xSSE2" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        endif()
      endif()

      # TODO PGI/Cray/SunPro ...

    else()
      # Others: GNU, Clang and variants

      # Set -march flag
      foreach(_flag ${_march_flag_list})
        AddCompilerFlag("-march=${_flag}" CXX_RESULT _good CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        if(_good)
          break()
        endif(_good)
      endforeach(_flag)

      # Set -m<feature> flag for enabled features
      foreach(_flag ${_enable_extension_list})
        AddCompilerFlag("-m${_flag}" CXX_RESULT _result)
        if(_result)
          set(_header FALSE)
          if(_flag STREQUAL "sse3")
            set(_header "pmmintrin.h")
          elseif(_flag STREQUAL "ssse3")
            set(_header "tmmintrin.h")
          elseif(_flag STREQUAL "sse4.1")
            set(_header "smmintrin.h")
          elseif(_flag STREQUAL "sse4.2")
            set(_header "nmmintrin.h")
          elseif(_flag STREQUAL "sse4a")
            set(_header "ammintrin.h")
          elseif(_flag STREQUAL "avx")
            set(_header "immintrin.h")
          elseif(_flag STREQUAL "avx2")
            set(_header "immintrin.h")
          elseif(_flag STREQUAL "avx512*")
            set(_header "immintrin.h")
          elseif(_flag STREQUAL "fma4")
            set(_header "x86intrin.h")
          elseif(_flag STREQUAL "xop")
            set(_header "x86intrin.h")
          elseif(_flag STREQUAL "bmi")
            set(_header "ammintrin.h")
          elseif(_flag STREQUAL "bmi2")
            set(_header "ammintrin.h")
          elseif(_flag STREQUAL "rdrnd")
            set(_header "immintrin.h")
          elseif(_flag STREQUAL "rdpid")
            set(_header "immintrin.h")
          elseif(_flag STREQUAL "rdseed")
            set(_header "immintrin.h")
          endif()
          set(_resultVar "HAVE_${_header}")
          string(REPLACE "." "_" _resultVar "${_resultVar}")
          if(_header)
            CHECK_INCLUDE_FILE_CXX("${_header}" ${_resultVar} "-m${_flag}")
            if(NOT ${_resultVar})
              set(_useVar "USE_${_flag}")
              string(TOUPPER "${_useVar}" _useVar)
              string(REPLACE "." "_" _useVar "${_useVar}")
              message(STATUS "disabling ${_useVar} because ${_header} is missing")
              set(${_useVar} FALSE)
              list(APPEND _disable_extension_list "${_flag}")
            endif()
          endif()
          if(NOT _header OR ${_resultVar})
            list(APPEND OFA_ARCHITECTURE_FLAGS "-m${_flag}")
          endif()
        endif()
      endforeach(_flag)

      # Set -mno-feature flag for disabled features
      foreach(_flag ${_disable_extension_list})
        AddCompilerFlag("-mno-${_flag}" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      endforeach(_flag)
    endif()
  endif()

  # Compile code with profiling instrumentation
  if(TARGET_PROFILER STREQUAL "gprof")
    AddCompilerFlag("-pg" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
  elseif(TARGET_PROFILER STREQUAL "vtune")
    if (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
      # Need to check if this also works on Windows
      AddCompilerFlag("-g" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-debug inline-debug-info" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-D TBB_USE_THREADING_TOOLS" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-parallel-source-info=2" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-gline-tables-only" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-fdebug-info-for-profiling" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCompilerFlag("-Xsprofile" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
    endif()
  endif()

  if(OFA_VERBOSE)
    string(REPLACE ";"  ", " _str "${OFA_ARCHITECTURE_FLAGS}")
    message(STATUS "OFA_ARCHITECTURE_FLAGS: " ${_str})
  endif()

endmacro(OFA_HandleX86Options)
