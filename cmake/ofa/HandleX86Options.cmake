#=============================================================================
# Handling of X86 / X86_64 options
#
# This is a three-step process:
#
# 1. Generate a list of available compiler flags for the specific CPU
#
# 2. Enable/disable features based on compiler/linker capabilities
#
# 3. Set compiler-specific flags (-m<feature>/-mno-<feature>)
#=============================================================================

include(ofa/AddCXXCompilerFlag)
include(ofa/CommonMacros)
include(CheckIncludeFileCXX)

macro(OFA_HandleX86Options)

  # Special treatment for "native" flag
  if(TARGET_ARCHITECTURE STREQUAL "native")
    if(MSVC)
      # MSVC (on Windows)
      message(FATAL_ERROR, "[OFA] MSVC does not support \"native\" flag.")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Intel"
        OR CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM")
      if(WIN32)
        # Intel (on Windows)
        AddCXXCompilerFlag("/QxHOST" FLAGS OFA_ARCHITECTURE_FLAGS)
      else()
        # Intel (on Linux)
        AddCXXCompilerFlag("-xHOST" FLAGS OFA_ARCHITECTURE_FLAGS)
      endif()
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC"
        OR CMAKE_CXX_COMPILER_ID MATCHES "PGI")
      # NVidia HPC / PGI (on Linux/Windows
      AddCXXCompilerFlag("-tp=native" FLAGS OFA_ARCHITECTURE_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "SunPro")
      # Sun/Oracle Studio (on Linux/Sun OS)
      AddCXXCompilerFlag("-native" FLAGS OFA_ARCHITECTURE_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")
      # Cray (on Linux)
      message(FATAL_ERROR, "[OFA] Cray compiler does not support \"native\" flag.")
    else()
      # Others: GNU, Clang and variants
      _ofa_find(OFA_ARCHITECTURE_FLAGS "-march=native" _found)
      if(NOT _found)
        AddCXXCompilerFlag("-march=native" FLAGS OFA_ARCHITECTURE_FLAGS)
      endif()
    endif()

  elseif(NOT TARGET_ARCHITECTURE STREQUAL "none")

    # Step 1: Generate a list of compiler flags for the specific CPU
    set(_march_flag_list)
    set(_available_extension_list)

    # Define macros for Intel
    macro(_nehalem)
      list(APPEND _march_flag_list "nehalem")
      list(APPEND _march_flag_list "corei7")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "mmx" "sse" "sse2" "sse3" "ssse3" "sse4.1" "sse4.2" "popcnt")
    endmacro()
    macro(_westmere)
      list(APPEND _march_flag_list "westmere")
      _nehalem()
      list(APPEND _available_extension_list "aes" "pclmul")
    endmacro()
    macro(_sandybridge)
      list(APPEND _march_flag_list "sandybridge")
      list(APPEND _march_flag_list "corei7-avx")
      _westmere()
      list(APPEND _available_extension_list "avx")
    endmacro()
    macro(_ivybridge)
      list(APPEND _march_flag_list "ivybridge")
      list(APPEND _march_flag_list "core-avx-i")
      _sandybridge()
      list(APPEND _available_extension_list "rdrnd" "f16c" "fsgsbase")
    endmacro()
    macro(_haswell)
      list(APPEND _march_flag_list "haswell")
      list(APPEND _march_flag_list "core-avx2")
      _ivybridge()
      list(APPEND _available_extension_list "avx2" "fma" "bmi" "bmi2")
    endmacro()
    macro(_broadwell)
      list(APPEND _march_flag_list "broadwell")
      _haswell()
      list(APPEND _available_extension_list "rdseed" "adcx" "prfchw")
    endmacro()
    macro(_skylake)
      list(APPEND _march_flag_list "skylake")
      _broadwell()
      list(APPEND _available_extension_list "clflushopt" "xsavec" "xsaves")
    endmacro()
    macro(_skylake_avx512)
      list(APPEND _march_flag_list "skylake-avx512")
      _skylake()
      list(APPEND _available_extension_list "avx512bw" "avx512cd" "avx512dq" "avx512f" "avx512vl" "clwb" "pku")
    endmacro()
    macro(_cascadelake)
      list(APPEND _march_flag_list "cascadelake")
      _skylake_avx512()
      list(APPEND _available_extension_list "avx512vnni")
    endmacro()
    macro(_cooperlake)
      list(APPEND _march_flag_list "cooperlake")
      _cascadelake()
      list(APPEND _available_extension_list "avx512bf16")
    endmacro()
    macro(_cannonlake)
      list(APPEND _march_flag_list "cannonlake")
      _skylake()
      list(APPEND _available_extension_list "avx512bw" "avx512cd" "avx512dq" "avx512f" "avx512vl" "clwb" "pku" "avx512ifma" "avx512vbmi" "sha" "umip")
    endmacro()
    macro(_icelake)
      list(APPEND _march_flag_list "icelake-client")
      _cannonlake()
      list(APPEND _available_extension_list "avx512bitalg" "avx512vbmi2" "avx512vnni" "avx512vpopcntdq" "clwb" "gfni" "rdpid" "vaes" "vpclmulqdq")
    endmacro()
    macro(_icelake_avx512)
      list(APPEND _march_flag_list "icelake-server")
      _icelake()
      list(APPEND _available_extension_list "pconfig" "wbnoinvd")
    endmacro()
    macro(_tigerlake)
      list(APPEND _march_flag_list "tigerlake")
      _icelake()
      list(APPEND _available_extension_list "avx512vp2intersect" "keylocker" "movdir64b" "movdiri" "pconfig" "wbnoinvd")
    endmacro()
    macro(_alderlake)
      list(APPEND _march_flag_list "alderlake")
      _broadwell()
      list(APPEND _available_extension_list "avxvnni" "cldemote" "clwb" "gfni" "hreset" "kl" "lzcnt" "movdir64b" "movdiri" "pconfig" "pku" "ptwrite" "rdpid" "serialize" "sgx" "umip" "vaes" "vpclmulqdq" "waitpkg" "widekl" "xsave" "xsavec" "xsaveopt" "xsaves")
    endmacro()
    macro(_sapphirerapids)
      list(APPEND _march_flag_list "sapphirerapids")
      _skylake_avx512()
      list(APPEND _available_extension_list "amx-bf16" "amx-int8" "amx-tile" "avxvnni" "avx512bf16" "avx512vnni" "avx512vp2intersect" "cldemote" "enqcmd" "movdir64b" "movdiri" "ptwrite" "serialize" "tsxldtrk" "uintr" "waitpkg")
    endmacro()
    macro(_rocketlake)
      list(APPEND _march_flag_list "rocketlake")
      _skylake_avx512()
      list(APPEND _available_extension_list "avx512bitalg" "avx512ifma" "avx512vbmi" "avx512vbmi2" "avx512vnni" "avx512vpopcntdq" "gfni" "rdpid" "sha" "umip" "vaes" "vpclmulqdq")
    endmacro()
    macro(_knightslanding)
      list(APPEND _march_flag_list "knl")
      _broadwell()
      list(APPEND _available_extension_list "avx512f" "avx512pf" "avx512er" "avx512cd")
    endmacro()
    macro(_knightsmill)
      list(APPEND _march_flag_list "knm")
      _broadwell()
      list(APPEND _available_extension_list "avx512f" "avx512pf" "avx512er" "avx512cd" "avx5124fmaps" "avx5124vnni" "avx512vpopcntdq")
    endmacro()
    macro(_silvermont)
      list(APPEND _march_flag_list "silvermont")
      _westmere()
      list(APPEND _available_extension_list "rdrnd")
    endmacro()
    macro(_goldmont)
      list(APPEND _march_flag_list "goldmont")
      _silvermont()
      list(APPEND _available_extension_list "rdseed")
    endmacro()
    macro(_goldmont_plus)
      list(APPEND _march_flag_list "goldmont-plus")
      _goldmont()
      list(APPEND _available_extension_list "rdpid")
    endmacro()
    macro(_tremont)
      list(APPEND _march_flag_list "tremont")
      _goldmont_plus()
    endmacro()

    # TODO: Define similar macros for AMD

    # Intel
    if(TARGET_ARCHITECTURE STREQUAL "core" OR TARGET_ARCHITECTURE STREQUAL "core2")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "mmx" "sse" "sse2" "sse3")
    elseif(TARGET_ARCHITECTURE STREQUAL "merom")
      list(APPEND _march_flag_list "merom")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "mmx" "sse" "sse2" "sse3" "ssse3")
    elseif(TARGET_ARCHITECTURE STREQUAL "penryn")
      list(APPEND _march_flag_list "penryn")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "mmx" "sse" "sse2" "sse3" "ssse3")
      message(STATUS "[OFA] Sadly the Penryn architecture exists in variants with SSE4.1 and without SSE4.1.")
      if(_cpu_flags MATCHES "sse4_1")
        message(STATUS "[OFA] SSE4.1: enabled (auto-detected from this computer's CPU flags)")
        list(APPEND _available_extension_list "sse4.1")
      else()
        message(STATUS "[OFA] SSE4.1: disabled (auto-detected from this computer's CPU flags)")
      endif()
    elseif(TARGET_ARCHITECTURE STREQUAL "knm")
      _knightsmill()
    elseif(TARGET_ARCHITECTURE STREQUAL "knl")
      _knightslanding()
    elseif(TARGET_ARCHITECTURE STREQUAL "rocketlake")
      _rocketlake()
    elseif(TARGET_ARCHITECTURE STREQUAL "sapphirerapids")
      _sapphirerapids()
    elseif(TARGET_ARCHITECTURE STREQUAL "alderlake")
      _alderlake()
    elseif(TARGET_ARCHITECTURE STREQUAL "tigerlake")
      _tigerlake()
    elseif(TARGET_ARCHITECTURE STREQUAL "icelake")
      _icelake()
    elseif(TARGET_ARCHITECTURE STREQUAL "icelake-xeon" OR TARGET_ARCHITECTURE STREQUAL "icelake-avx512")
      _icelake_avx512()
    elseif(TARGET_ARCHITECTURE STREQUAL "cannonlake")
      _cannonlake()
    elseif(TARGET_ARCHITECTURE STREQUAL "cooperlake")
      _cooperlake()
    elseif(TARGET_ARCHITECTURE STREQUAL "cascadelake")
      _cascadelake()
    elseif(TARGET_ARCHITECTURE STREQUAL "kabylake")
      _skylake()
    elseif(TARGET_ARCHITECTURE STREQUAL "skylake-xeon" OR TARGET_ARCHITECTURE STREQUAL "skylake-avx512")
      _skylake_avx512()
    elseif(TARGET_ARCHITECTURE STREQUAL "skylake")
      _skylake()
    elseif(TARGET_ARCHITECTURE STREQUAL "broadwell")
      _broadwell()
    elseif(TARGET_ARCHITECTURE STREQUAL "haswell")
      _haswell()
    elseif(TARGET_ARCHITECTURE STREQUAL "ivybridge")
      _ivybridge()
    elseif(TARGET_ARCHITECTURE STREQUAL "sandybridge")
      _sandybridge()
    elseif(TARGET_ARCHITECTURE STREQUAL "westmere")
      _westmere()
    elseif(TARGET_ARCHITECTURE STREQUAL "nehalem")
      _nehalem()
    elseif(TARGET_ARCHITECTURE STREQUAL "tremont")
      _tremont()
    elseif(TARGET_ARCHITECTURE STREQUAL "goldmont-plus")
      _goldmont_plus()
    elseif(TARGET_ARCHITECTURE STREQUAL "goldmont")
      _goldmont()
    elseif(TARGET_ARCHITECTURE STREQUAL "silvermont")
      _silvermont()
    elseif(TARGET_ARCHITECTURE STREQUAL "bonnell")
      list(APPEND _march_flag_list "bonnell")
      list(APPEND _march_flag_list "atom")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")
    elseif(TARGET_ARCHITECTURE STREQUAL "atom")
      list(APPEND _march_flag_list "atom")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3")

      # AMD
    elseif(TARGET_ARCHITECTURE STREQUAL "k8")
      list(APPEND _march_flag_list "k8")
      list(APPEND _available_extension_list "sse" "sse2")
    elseif(TARGET_ARCHITECTURE STREQUAL "k8-sse3")
      list(APPEND _march_flag_list "k8-sse3")
      list(APPEND _march_flag_list "k8")
      list(APPEND _available_extension_list "sse" "sse2" "sse3")
    elseif(TARGET_ARCHITECTURE STREQUAL "amd16h")
      list(APPEND _march_flag_list "btver2")
      list(APPEND _march_flag_list "btver1")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "f16c")
    elseif(TARGET_ARCHITECTURE STREQUAL "amd14h")
      list(APPEND _march_flag_list "btver1")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "zen3")
      list(APPEND _march_flag_list "znver2")
      list(APPEND _march_flag_list "znver1")
      _skylake()
      list(APPEND _available_extension_list "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "zen2")
      list(APPEND _march_flag_list "znver2")
      list(APPEND _march_flag_list "znver1")
      _skylake()
      list(APPEND _available_extension_list "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "zen")
      list(APPEND _march_flag_list "znver1")
      _skylake()
      list(APPEND _available_extension_list "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "excavator")
      list(APPEND _march_flag_list "bdver4")
      list(APPEND _march_flag_list "bdver3")
      list(APPEND _march_flag_list "bdver2")
      list(APPEND _march_flag_list "bdver1")
      list(APPEND _march_flag_list "bulldozer")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "avx2" "xop" "fma4" "fma" "f16c" "bmi" "bmi2" "rdrnd")
    elseif(TARGET_ARCHITECTURE STREQUAL "steamroller")
      list(APPEND _march_flag_list "bdver3")
      list(APPEND _march_flag_list "bdver2")
      list(APPEND _march_flag_list "bdver1")
      list(APPEND _march_flag_list "bulldozer")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4" "fma" "f16c" "bmi")
    elseif(TARGET_ARCHITECTURE STREQUAL "piledriver")
      list(APPEND _march_flag_list "bdver2")
      list(APPEND _march_flag_list "bdver1")
      list(APPEND _march_flag_list "bulldozer")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4" "fma" "f16c" "bmi")
    elseif(TARGET_ARCHITECTURE STREQUAL "interlagos")
      list(APPEND _march_flag_list "bdver1")
      list(APPEND _march_flag_list "bulldozer")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4")
    elseif(TARGET_ARCHITECTURE STREQUAL "bulldozer")
      list(APPEND _march_flag_list "bdver1")
      list(APPEND _march_flag_list "bulldozer")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "ssse3" "sse4a" "sse4.1" "sse4.2" "avx" "xop" "fma4")
    elseif(TARGET_ARCHITECTURE STREQUAL "barcelona")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "istanbul")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")
    elseif(TARGET_ARCHITECTURE STREQUAL "magny-cours")
      list(APPEND _march_flag_list "barcelona")
      list(APPEND _march_flag_list "core2")
      list(APPEND _available_extension_list "sse" "sse2" "sse3" "sse4a")

      # Others
    elseif(TARGET_ARCHITECTURE STREQUAL "generic")
      list(APPEND _march_flag_list "generic")
      list(APPEND _available_extension_list "sse")
    elseif(TARGET_ARCHITECTURE STREQUAL "none")
      # add this clause to remove it from the else clause

    else()
      message(FATAL_ERROR "[OFA] Unknown target architecture: \"${TARGET_ARCHITECTURE}\". Please set TARGET_ARCHITECTURE to a supported value.")
    endif()

    list(SORT _available_extension_list)
    list(REMOVE_DUPLICATES _available_extension_list)

    if(OFA_VERBOSE)
      if(_march_flag_list)
        string(REPLACE ";"  ", " _str "${_march_flag_list}")
        string(TOUPPER ${_str} _str)
        message(STATUS "[OFA] CPU architectures: " ${_str})
      endif()
      if(_available_extension_list)
        string(REPLACE ";"  ", " _str "${_available_extension_list}")
        string(TOUPPER ${_str} _str)
        message(STATUS "[OFA] Extensions (available): ${_str}")
      endif()
    endif()

    if(NOT TARGET_ARCHITECTURE STREQUAL "none")
      set(_check_extension_list)
      set(_disable_extension_list)
      set(_enable_extension_list)

      # Step 2: Enable/disable feature flags based on available CPU
      #         features, used-defined USE_<feature> variables and
      #         the capabilities of the host system's compiler and linker
      file(READ ${CMAKE_SOURCE_DIR}/cmake/ofa/ChecksX86.txt _checks)
      string(REPLACE ";" "|" _checks "${_checks}")
      string(REPLACE "\n" ";" _checks "${_checks}")

      # Iterate over the list of checks line by line
      foreach (_check ${_checks})
        if ("${_check}" MATCHES "^#" ) # Skip comment
          continue()
        endif()

        # Extract extra CPU extensions, header files, function name, and parameters
        string(REPLACE "|" ";" _check "${_check}")
        list(GET _check 0 _check_extensions)
        list(GET _check 1 _check_headers)
        list(GET _check 2 _check_function)
        list(GET _check 3 _check_params)

        # Convert list of extensions into compiler flags
        string(REPLACE "," ";" _check_extensions "${_check_extensions}")
        list(GET _check_extensions 0 _extension)
        string(REPLACE ";" " -m" _check_flags "-m${_check_extensions}")
        list(APPEND _check_extension_list "${_extension}")

        # Define USE_<_extension> variable
        set(_useVar "USE_${_extension}")
        string(TOUPPER "${_useVar}" _useVar)
        string(REPLACE "." "_" _useVar "${_useVar}")

        # Set USE_<_extension> if not set externally
        if(NOT DEFINED ${_useVar})
          _ofa_find(_available_extension_list "${_extension}" _found)
          set(${_useVar} ${_found})
        endif()

        # Apply compiler-specific fixes
        if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
          # GNU GCC does not provide definitions for __int32 and __in64
          set(_code "#define __int32 long\n#define __int64 long long\nint main() { ${_check_function}(${_check_params})\; return 0\; }")
        else()
          set(_code "int main() { ${_check_function}(${_check_params})\; return 0\; }")
        endif()

        if(${_useVar})
          # Check if the compiler supports the -m<_extension> flag and
          # can compile the provided test code with it
          AddCXXCompilerFlag("-m${_extension}"
            EXTRA_FLAGS ${_check_flags}
            HEADERS     ${_check_headers}
            CODE        "${_code}"
            RESULT      _ok)
          if(NOT ${_ok})
            set(${_useVar} FALSE CACHE BOOL "Use ${_extension} extension.")
          else()
            set(${_useVar} ${${_useVar}} CACHE BOOL "Use ${_extension} extension.")
          endif()
        else()
          set(${_useVar} ${${_useVar}} CACHE BOOL "Use ${_extension} extension.")
        endif()
        mark_as_advanced(${_useVar})
      endforeach()

      # Generate lists of enabled/disabled flags
      list(REMOVE_DUPLICATES _check_extension_list)
      foreach(_extension ${_check_extension_list})
        _ofa_find(_available_extension_list "${_extension}" _found)
        set(_useVar "USE_${_extension}")
        string(TOUPPER "${_useVar}" _useVar)
        string(REPLACE "." "_" _useVar "${_useVar}")
        if(${_useVar})
          set(_haveVar "HAVE__m${_extension}")
          string(REPLACE "." "_" _haveVar "${_haveVar}")
          if(NOT ${_haveVar})
            if(OFA_VERBOSE)
              message(STATUS "[OFA] Ignoring -m${_extension} extension because checks failed")
            endif()
            continue()
          endif()
          list(APPEND _enable_extension_list "${_extension}")
        else()
          set(_haveVar "HAVE__mno_${_extension}")
          string(REPLACE "." "_" _haveVar "${_haveVar}")
          if(NOT ${_haveVar})
            if(OFA_VERBOSE)
              message(STATUS "[OFA] Ignoring -mno-${_extension} extension because checks failed")
            endif()
            continue()
          endif()
          list(APPEND _disable_extension_list "${_extension}")
        endif()
      endforeach()

      if(OFA_VERBOSE)
        if(_enable_extension_list)
          list(SORT _enable_extension_list)
          string(REPLACE ";"  ", " _str "${_enable_extension_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (enabled): ${_str}")
        endif()
        if(_disable_extension_list)
          list(SORT _disable_extension_list)
          string(REPLACE ";"  ", " _str "${_disable_extension_list}")
          string(TOUPPER ${_str} _str)
          message(STATUS "[OFA] Extensions (disabled): ${_str}")
        endif()
      endif()

      # Add compiler flags
      if(MSVC AND MSVC_VERSION GREATER 1700)
        _ofa_find(_enable_extension_list "avx512f" _found)
        if(_found)
          AddCXXCompilerFlag("/arch:AVX512" FLAGS OFA_ARCHITECTURE_FLAGS RESULT _found)
        endif()
        if(NOT _found)
          _ofa_find(_enable_extension_list "avx2" _found)
          if(_found)
            AddCXXCompilerFlag("/arch:AVX2" FLAGS OFA_ARCHITECTURE_FLAGS RESULT _found)
          endif()
        endif()
        if(NOT _found)
          _ofa_find(_enable_extension_list "avx" _found)
          if(_found)
            AddCXXCompilerFlag("/arch:AVX" FLAGS OFA_ARCHITECTURE_FLAGS RESULT _found)
          endif()
        endif()
        if(NOT _found)
          _ofa_find(_enable_extension_list "sse2" _found)
          if(_found)
            AddCXXCompilerFlag("/arch:SSE2" FLAGS OFA_ARCHITECTURE_FLAGS)
          endif()
        endif()
        if(NOT _found)
          _ofa_find(_enable_extension_list "sse" _found)
          if(_found)
            AddCXXCompilerFlag("/arch:SSE" FLAGS OFA_ARCHITECTURE_FLAGS)
          endif()
        endif()
        foreach(_extension ${_enable_extension_list})
          string(TOUPPER "${_extension}" _extension)
          string(REPLACE "." "_" _extension "__${_extension}__")
          add_definitions("-D${_extension}")
        endforeach(_extension)

      elseif(CMAKE_CXX_COMPILER_ID MATCHES "Intel"
          OR CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM")

        if(WIN32)
          # Intel (on Windows)
          set(OFA_map_knl "-QxKNL;-QxMIC-AVX512")
          set(OFA_map_knm "-QxKNM;-QxMIC-AVX512")
          set(OFA_map_rocketlake "-QxROCKETLAKE;-QxCORE-AVX512")
          set(OFA_map_sapphirerapids "-QxSAPPHIRERAPIDS;-QxCORE-AVX512")
          set(OFA_map_alderlake "-QxALDERLAKE;-QxCORE-AVX512")
          set(OFA_map_tigerlake "-QxTIGERLAKE;-QxCORE-AVX512")
          set(OFA_map_icelake-server "-QxICELAKE-SERVER;-QxCORE-AVX512")
          set(OFA_map_icelake-avx512 "-QxICELAKE-SERVER;-QxCORE-AVX512")
          set(OFA_map_icelake-client "-QxICELAKE-CLIENT;-QxCORE-AVX512")
          set(OFA_map_icelake "-QxICELAKE-CLIENT;-QxCORE-AVX512")
          set(OFA_map_cannonlake "-QxCANNONLAKE;-QxCORE-AVX512")
          set(OFA_map_cooperlake "-QxCOOPERLAKE;-QxCORE-AVX512")
          set(OFA_map_cascadelake "-QxCASCADELAKE;-QxCORE-AVX512")
          set(OFA_map_skylake-avx512 "-QxSKYLAKE-AVX512;-QxCORE-AVX512")
          set(OFA_map_skylake "-QxSKYLAKE;-QxCORE-AVX2")
          set(OFA_map_broadwell "-QxBROADWELL;-QxCORE-AVX2")
          set(OFA_map_haswell "-QxHASWELL;-QxCORE-AVX2")
          set(OFA_map_ivybridge "-QxIVYBRIDGE;-QxCORE-AVX-I")
          set(OFA_map_sandybridge "-QxSANDYBRIDGE;-QxAVX")
          set(OFA_map_westmere "-QxSSE4.2")
          set(OFA_map_nehalem "-QxSSE4.2")
          set(OFA_map_penryn "-QxSSSE3")
          set(OFA_map_merom "-QxSSSE3")
          set(OFA_map_core2 "-QxSSE3")
          set(_ok FALSE)
        else()
          # Intel (in Linux)
          set(OFA_map_knl "-xKNL;-xMIC-AVX512")
          set(OFA_map_knm "-xKNM;-xMIC-AVX512")
          set(OFA_map_rocketlake "-xROCKETLAKE;-xCORE-AVX512")
          set(OFA_map_sapphirerapids "-xSAPPHIRERAPIDS;-xCORE-AVX512")
          set(OFA_map_alderlake "-xALDERLAKE;-xCORE-AVX512")
          set(OFA_map_tigerlake "-xTIGERLAKE;-xCORE-AVX512")
          set(OFA_map_icelake-server "-xICELAKE-SERVER;-xCORE-AVX512")
          set(OFA_map_icelake-avx512 "-xICELAKE-SERVER;-xCORE-AVX512")
          set(OFA_map_icelake-client "-xICELAKE-CLIENT;-xCORE-AVX512")
          set(OFA_map_icelake "-xICELAKE-CLIENT;-xCORE-AVX512")
          set(OFA_map_cannonlake "-xCANNONLAKE;-xCORE-AVX512")
          set(OFA_map_cooperlake "-xCOOPERLAKE;-xCORE-AVX512")
          set(OFA_map_cascadelake "-xCASCADELAKE;-xCORE-AVX512")
          set(OFA_map_skylake-avx512 "-xSKYLAKE-AVX512;-xCORE-AVX512")
          set(OFA_map_skylake "-xSKYLAKE;-xCORE-AVX2")
          set(OFA_map_broadwell "-xBROADWELL;-xCORE-AVX2")
          set(OFA_map_haswell "-xHASWELL;-xCORE-AVX2")
          set(OFA_map_ivybridge "-xIVYBRIDGE;-xCORE-AVX-I")
          set(OFA_map_sandybridge "-xSANDYBRIDGE;-xAVX")
          set(OFA_map_westmere "-xSSE4.2")
          set(OFA_map_nehalem "-xSSE4.2")
          set(OFA_map_penryn "-xSSSE3")
          set(OFA_map_merom "-xSSSE3")
          set(OFA_map_core2 "-xSSE3")
          set(_ok FALSE)
        endif()

        foreach(_arch ${_march_flag_list})
          if(DEFINED OFA_map_${_arch})
            foreach(_flag ${OFA_map_${_arch}})
              AddCXXCompilerFlag(${_flag} FLAGS OFA_ARCHITECTURE_FLAGS RESULT _ok)
              if(_ok)
                break()
              endif()
            endforeach()
            if(_ok)
              break()
            endif()
          endif()
        endforeach()
        if(NOT _ok)
          # This is the Intel compiler, so SSE2 is a very reasonable baseline.
          message(STATUS "[OFA] Did not recognize the requested architecture flag ${_arch}, falling back to SSE2")
          if(WIN32)
            AddCXXCompilerFlag("-QxSSE2" FLAGS OFA_ARCHITECTURE_FLAGS)
          else()
            AddCXXCompilerFlag("-xSSE2" FLAGS OFA_ARCHITECTURE_FLAGS)
          endif()
        endif()

        # Set -m<_extension> flag for enabled features
        foreach(_extension ${_enable_extension_list})
          AddCXXCompilerFlag("-m${_extension}" FLAGS OFA_ARCHITECTURE_FLAGS)
        endforeach(_extension)

        # Set -mno-<_extension> flag for disabled features
        foreach(_extension ${_disable_extension_list})
          AddCXXCompilerFlag("-mno-${_extension}" FLAGS OFA_ARCHITECTURE_FLAGS)
        endforeach(_extension)

        # TODO PGI/Cray/SunPro ...

      else()
        # Others: GNU, Clang and variants

        # Set -march flag
        foreach(_flag ${_march_flag_list})
          AddCXXCompilerFlag("-march=${_flag}" FLAGS OFA_ARCHITECTURE_FLAGS RESULT _good)
          if(_good)
            break()
          endif(_good)
        endforeach(_flag)

        # Set -m<feature> flag for enabled features
        foreach(_flag ${_enable_extension_list})
          AddCXXCompilerFlag("-m${_flag}" FLAGS OFA_ARCHITECTURE_FLAGS)
        endforeach(_flag)

        # Set -mno-feature flag for disabled features
        foreach(_flag ${_disable_extension_list})
          AddCXXCompilerFlag("-mno-${_flag}" FLAGS OFA_ARCHITECTURE_FLAGS)
        endforeach(_flag)
      endif()
    endif()

  endif()

  # Compile code with profiling instrumentation
  if(TARGET_PROFILER STREQUAL "gprof")
    AddCXXCompilerFlag("-pg" FLAGS OFA_ARCHITECTURE_FLAGS)
  elseif(TARGET_PROFILER STREQUAL "vtune")
    if (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
      # Need to check if this also works on Windows
      AddCXXCompilerFlag("-g" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-debug inline-debug-info" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-D TBB_USE_THREADING_TOOLS" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-parallel-source-info=2" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-gline-tables-only" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-fdebug-info-for-profiling" FLAGS OFA_ARCHITECTURE_FLAGS)
      AddCXXCompilerFlag("-Xsprofile" FLAGS OFA_ARCHITECTURE_FLAGS)
    endif()
  endif()

  list(REMOVE_DUPLICATES OFA_ARCHITECTURE_FLAGS)

  if(OFA_VERBOSE)
    string(REPLACE ";"  ", " _str "${OFA_ARCHITECTURE_FLAGS}")
    message(STATUS "OFA_ARCHITECTURE_FLAGS: " ${_str})
  endif()

endmacro(OFA_HandleX86Options)
