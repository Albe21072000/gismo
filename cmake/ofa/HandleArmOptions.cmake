#=============================================================================
# Handling of ARM / ARM64 options
#
# This is a two-step process:
#
# 1. Generate a list of compiler flags for the specific CPU
#
# 2. Special compiler-specific treatment of "native" flag
#
# 3. Disabling of "broken" features based on OFA_xxx_INTRINSICS_BROKEN options
#
# 4. Set compiler-specific flags
#=============================================================================

include(ofa/AddCompilerFlag)
include(ofa/CommonMacros)
include(CheckIncludeFileCXX)

macro(OFA_HandleArmOptions)
  set(_march_flag_list)
  set(_mtune_flag_list)
  set(_available_vector_units_list)

  # ARM
  if(TARGET_ARCHITECTURE STREQUAL "strongarm")
    list(APPEND _mtune_flag_list "strongarm")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm8")
    list(APPEND _mtune_flag_list "arm8")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm810")
    list(APPEND _mtune_flag_list "arm810")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "fa526")
    list(APPEND _mtune_flag_list "fa526")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "fa626")
    list(APPEND _mtune_flag_list "fa626")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm7tdmi")
    list(APPEND _mtune_flag_list "arm7tdmi")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm7tdmi-s")
    list(APPEND _mtune_flag_list "arm7tdmi-s")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm710t")
    list(APPEND _mtune_flag_list "arm710t")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm720t")
    list(APPEND _mtune_flag_list "arm720t")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm740t")
    list(APPEND _mtune_flag_list "arm740t")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm9")
    list(APPEND _mtune_flag_list "arm9")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm9tdmi")
    list(APPEND _mtune_flag_list "arm9tdmi")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm920")
    list(APPEND _mtune_flag_list "arm920")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm920t")
    list(APPEND _mtune_flag_list "arm920t")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm922t")
    list(APPEND _mtune_flag_list "arm922t")
    list(APPEND _march_flag_list "armv4t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm940t")
    list(APPEND _mtune_flag_list "arm940t")
    list(APPEND _march_flag_list "armv4t")

  elseif(TARGET_ARCHITECTURE STREQUAL "arm1020t")
    list(APPEND _mtune_flag_list "arm1020t")
    list(APPEND _march_flag_list "armv5t")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm10tdmi")
    list(APPEND _mtune_flag_list "arm10tdmi")
    list(APPEND _march_flag_list "armv5t")

  elseif(TARGET_ARCHITECTURE STREQUAL "arm9e")
    list(APPEND _mtune_flag_list "arm9e")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm946e-s")
    list(APPEND _mtune_flag_list "arm946e-s")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm966e-s")
    list(APPEND _mtune_flag_list "arm966e-s")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm968e-s")
    list(APPEND _mtune_flag_list "arm968e-s")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm10e")
    list(APPEND _mtune_flag_list "arm10e")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1020e")
    list(APPEND _mtune_flag_list "arm1020e")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1022e")
    list(APPEND _mtune_flag_list "arm1022e")
    list(APPEND _march_flag_list "armv5te")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "xscale")
    list(APPEND _mtune_flag_list "xscale")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "iwmmxt")
    list(APPEND _mtune_flag_list "iwmmxt")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "iwmmxt2")
    list(APPEND _mtune_flag_list "iwmmxt2")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "fa606te")
    list(APPEND _mtune_flag_list "fa606te")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "fa626te")
    list(APPEND _mtune_flag_list "fa626te")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "fmp626")
    list(APPEND _mtune_flag_list "fmp626")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "fa726te")
    list(APPEND _mtune_flag_list "fa726te")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm926ej-s")
    list(APPEND _mtune_flag_list "arm926ej-s")
    list(APPEND _march_flag_list "armv5tej")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1026ej-s")
    list(APPEND _mtune_flag_list "arm1026ej-s")
    list(APPEND _march_flag_list "armv5tej")
    list(APPEND _available_vector_units_list "fp")

  elseif(TARGET_ARCHITECTURE STREQUAL "mpcore")
    list(APPEND _mtune_flag_list "mpcore")
    list(APPEND _march_flag_list "armv6k")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1136j-s")
    list(APPEND _mtune_flag_list "arm1136j-s")
    list(APPEND _march_flag_list "armv6j")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1136jf-s")
    list(APPEND _mtune_flag_list "arm1136jf-s")
    list(APPEND _march_flag_list "armv6j")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1156t2-s")
    list(APPEND _mtune_flag_list "arm1156t2-s")
    list(APPEND _march_flag_list "armv6t2")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1156t2f-s")
    list(APPEND _mtune_flag_list "arm1156t2f-s")
    list(APPEND _march_flag_list "armv6t2")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1176jz-s")
    list(APPEND _mtune_flag_list "arm1176jz-s")
    list(APPEND _march_flag_list "armv6kz")
  elseif(TARGET_ARCHITECTURE STREQUAL "arm1176jzf-s")
    list(APPEND _mtune_flag_list "arm1176jzf-s")
    list(APPEND _march_flag_list "armv6kz")
    list(APPEND _available_vector_units_list "fp")

  elseif(TARGET_ARCHITECTURE STREQUAL "generic-armv7-a")
    list(APPEND _mtune_flag_list "generic-armv7-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "mp" "sec" "vfpv3-d16" "vfpv3" "vfpv3-d16-fp16" "vfpv3-fp16" "vfpv4-d16" "vfpv4" "simd" "neon-fp16" "neon-vfpv4")

  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78")
    list(APPEND _mtune_flag_list "cortex-a78")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")

  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a5")
    list(APPEND _mtune_flag_list "cortex-a5")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "mp" "sec" "neon-fp16")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a7")
    list(APPEND _mtune_flag_list "cortex-a7")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a8")
    list(APPEND _mtune_flag_list "cortex-a8")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "sec" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a9")
    list(APPEND _mtune_flag_list "cortex-a9")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "mp" "sec" "neon-fp16")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a12")
    list(APPEND _mtune_flag_list "cortex-a12")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a15")
    list(APPEND _mtune_flag_list "cortex-a15")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a15.cortex-a7")
    list(APPEND _mtune_flag_list "cortex-a15.cortex-a7")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a17")
    list(APPEND _mtune_flag_list "cortex-a17")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a17.cortex-a7")
    list(APPEND _mtune_flag_list "cortex-a17.cortex-a7")
    list(APPEND _march_flag_list "armv7ve")
    list(APPEND _available_vector_units_list "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a32")
    list(APPEND _mtune_flag_list "cortex-a32")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a34")
    list(APPEND _mtune_flag_list "cortex-a34")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a35")
    list(APPEND _mtune_flag_list "cortex-a35")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a53")
    list(APPEND _mtune_flag_list "cortex-a53")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a55")
    list(APPEND _mtune_flag_list "cortex-a55")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a57")
    list(APPEND _mtune_flag_list "cortex-a57")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a57.cortext-a53")
    list(APPEND _mtune_flag_list "cortex-a57.cortext-a53")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a72")
    list(APPEND _mtune_flag_list "cortex-a72")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a72.cortext-a53")
    list(APPEND _mtune_flag_list "cortex-a72.cortext-a53")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73")
    list(APPEND _mtune_flag_list "cortex-a73")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73.cortext-a35")
    list(APPEND _mtune_flag_list "cortex-a73.cortext-a35")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a73.cortext-a53")
    list(APPEND _mtune_flag_list "cortex-a73.cortext-a53")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "simd")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a75")
    list(APPEND _mtune_flag_list "cortex-a75")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a75.cortext-a55")
    list(APPEND _mtune_flag_list "cortex-a75.cortext-a55")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76")
    list(APPEND _mtune_flag_list "cortex-a76")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76.cortext-a55")
    list(APPEND _mtune_flag_list "cortex-a76.cortext-a55")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a76ae")
    list(APPEND _mtune_flag_list "cortex-a76ae")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a77")
    list(APPEND _mtune_flag_list "cortex-a77")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78")
    list(APPEND _mtune_flag_list "cortex-a78")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78ae")
    list(APPEND _mtune_flag_list "cortex-a78ae")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a78c")
    list(APPEND _mtune_flag_list "cortex-a78c")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a710")
    list(APPEND _mtune_flag_list "cortex-a510")
    list(APPEND _march_flag_list "armv9-a")
    list(APPEND _march_flag_list "armv8.6-a")
    list(APPEND _march_flag_list "armv8.5-a")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "bf16" "fp16" "i8mm")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-a710")
    list(APPEND _mtune_flag_list "cortex-a710")
    list(APPEND _march_flag_list "armv9-a")
    list(APPEND _march_flag_list "armv8.6-a")
    list(APPEND _march_flag_list "armv8.5-a")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "bf16" "fp16" "i8mm")

  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m0")
    list(APPEND _mtune_flag_list "cortex-m0")
    list(APPEND _march_flag_list "armv6s-m")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m0plus")
    list(APPEND _mtune_flag_list "cortex-m0plus")
    list(APPEND _march_flag_list "armv6s-m")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m1")
    list(APPEND _mtune_flag_list "cortex-m1")
    list(APPEND _march_flag_list "armv6s-m")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m3")
    list(APPEND _mtune_flag_list "cortex-m3")
    list(APPEND _march_flag_list "armv7-m")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m4")
    list(APPEND _mtune_flag_list "cortex-m4")
    list(APPEND _march_flag_list "armv7e-m")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m7")
    list(APPEND _mtune_flag_list "cortex-m7")
    list(APPEND _march_flag_list "armv7e-m")
    list(APPEND _available_vector_units_list "fp.dp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m23")
    list(APPEND _mtune_flag_list "cortex-m23")
    list(APPEND _march_flag_list "armv8-m.base")
    list(APPEND _march_flag_list "armv7-m")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m33")
    list(APPEND _mtune_flag_list "cortex-m33")
    list(APPEND _march_flag_list "armv8-m.main")
    list(APPEND _march_flag_list "armv7-m")
    list(APPEND _available_vector_units_list "dsp" "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m35p")
    list(APPEND _mtune_flag_list "cortex-m35p")
    list(APPEND _march_flag_list "armv8-m.main")
    list(APPEND _march_flag_list "armv7-m")
    list(APPEND _available_vector_units_list "dsp" "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-m55")
    list(APPEND _mtune_flag_list "cortex-m55")
    list(APPEND _march_flag_list "armv8.1-m.main")
    list(APPEND _march_flag_list "armv8-m")
    list(APPEND _march_flag_list "armv7-m")
    list(APPEND _available_vector_units_list "mve.fp" "fp.dp")

  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r4")
    list(APPEND _mtune_flag_list "cortex-r4")
    list(APPEND _march_flag_list "armv7-r")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r4f")
    list(APPEND _mtune_flag_list "cortex-r4f")
    list(APPEND _march_flag_list "armv7-r")
    list(APPEND _available_vector_units_list "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r5")
    list(APPEND _mtune_flag_list "cortex-r5")
    list(APPEND _march_flag_list "armv7-r")
    list(APPEND _available_vector_units_list "idiv" "fp")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r7")
    list(APPEND _mtune_flag_list "cortex-r7")
    list(APPEND _march_flag_list "armv7-r")
    list(APPEND _available_vector_units_list "idiv" "vfpv3-d16-fp16")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r8")
    list(APPEND _mtune_flag_list "cortex-r8")
    list(APPEND _march_flag_list "armv7-r")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-r52")
    list(APPEND _mtune_flag_list "cortex-r52")
    list(APPEND _march_flag_list "armv8-r")
    list(APPEND _march_flag_list "armv7-r")
    list(APPEND _available_vector_units_list "crc" "simd" "idiv" "vfpv3-d16-fp16")

  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-x1")
    list(APPEND _mtune_flag_list "cortex-x1")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "cortex-x2")
    list(APPEND _march_flag_list "armv9-a")
    list(APPEND _march_flag_list "armv8.6-a")
    list(APPEND _march_flag_list "armv8.5-a")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "bf16" "fp16" "i8mm")

  elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-e1")
    list(APPEND _mtune_flag_list "neoverse-e1")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-n1")
    list(APPEND _mtune_flag_list "neoverse-n1")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "dotprod")
  elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-n2")
    list(APPEND _mtune_flag_list "neoverse-n2")
    list(APPEND _march_flag_list "armv8.5-a")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "bf16" "fp16" "i8mm")
  elseif(TARGET_ARCHITECTURE STREQUAL "neoverse-v1")
    list(APPEND _mtune_flag_list "neoverse-v1")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "bf16" "fp16" "i8mm")

  # Broadcom
  elseif(TARGET_ARCHITECTURE STREQUAL "brahma-b15")
    list(APPEND _mtune_flag_list "brahma-b15")
  elseif(TARGET_ARCHITECTURE STREQUAL "brahma-b53")
    list(APPEND _mtune_flag_list "brahma-b53")
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderx2")
    list(APPEND _mtune_flag_list "thunderx2")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crypto")

  # Cavium
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderx")
    list(APPEND _mtune_flag_list "thunderx")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto")
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt88")
    list(APPEND _mtune_flag_list "thunderxt88")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto")
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt81")
    list(APPEND _mtune_flag_list "thunderxt81")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto")
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderxt83")
    list(APPEND _mtune_flag_list "thunderxt83")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto")
  elseif(TARGET_ARCHITECTURE STREQUAL "thunderx2t99")
    list(APPEND _mtune_flag_list "thunderx2t99")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto")

  # DEC
  elseif(TARGET_ARCHITECTURE STREQUAL "strongarm110")
    list(APPEND _mtune_flag_list "strongarm110")
    list(APPEND _march_flag_list "armv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "strongarm1100")
    list(APPEND _mtune_flag_list "strongarm1100")
    list(APPEND _march_flag_list "armv4")

  # FUJITSU
  elseif(TARGET_ARCHITECTURE STREQUAL "a64fx")
    list(APPEND _mtune_flag_list "a64fx")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "fp16" "sve")

  # HiSilicon
  elseif(TARGET_ARCHITECTURE STREQUAL "tsv110")
    list(APPEND _mtune_flag_list "tsv110")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "aes" "crypto" "fp16" "sha2")

  # Nvidia
  elseif(TARGET_ARCHITECTURE STREQUAL "denver")
    list(APPEND _mtune_flag_list "denver")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd" "vfpv3" "vfpv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "denver2")
    list(APPEND _mtune_flag_list "denver2")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd" "vfpv3" "vfpv4")
  elseif(TARGET_ARCHITECTURE STREQUAL "carmel")
    list(APPEND _mtune_flag_list "denver")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd" "vfpv3" "vfpv4")

  # APM
  elseif(TARGET_ARCHITECTURE STREQUAL "xgene1")
    list(APPEND _mtune_flag_list "xgene1")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")

  # Qualcomm
  elseif(TARGET_ARCHITECTURE STREQUAL "scorpion")
    list(APPEND _mtune_flag_list "scorpion")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "krait")
    list(APPEND _mtune_flag_list "krait")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "kryo")
    list(APPEND _mtune_flag_list "kryo")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "kryo2")
    list(APPEND _mtune_flag_list "kryo2")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "falkor")
    list(APPEND _mtune_flag_list "falkor")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "saphira")
    list(APPEND _mtune_flag_list "saphira")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crc" "crypto" "simd" "vfpv3" "vfpv4")

  # Samsung
  elseif(TARGET_ARCHITECTURE STREQUAL "exynos-m1")
    list(APPEND _mtune_flag_list "exynos-m1")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "crypto" "simd")

  # Marvell
  elseif(TARGET_ARCHITECTURE STREQUAL "marvell-f")
    list(APPEND _mtune_flag_list "marvell-f")
    list(APPEND _march_flag_list "armv5te")
  elseif(TARGET_ARCHITECTURE STREQUAL "marvell-pj4")
    list(APPEND _mtune_flag_list "marvell-pj4")
    list(APPEND _march_flag_list "armv7-a")
    list(APPEND _available_vector_units_list "mp" "sec" "fp")

  # Intel
  elseif(TARGET_ARCHITECTURE STREQUAL "i80200")
    list(APPEND _mtune_flag_list "i80200")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa250a")
    list(APPEND _mtune_flag_list "pxa250a")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa210a")
    list(APPEND _mtune_flag_list "pxa210a")
  elseif(TARGET_ARCHITECTURE STREQUAL "i80321-400")
    list(APPEND _mtune_flag_list "i80321-400")
  elseif(TARGET_ARCHITECTURE STREQUAL "i80321-600")
    list(APPEND _mtune_flag_list "i80321-600")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa250b")
    list(APPEND _mtune_flag_list "pxa250b")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa210b")
    list(APPEND _mtune_flag_list "pxa210b")
  elseif(TARGET_ARCHITECTURE STREQUAL "i80321-400-b0")
    list(APPEND _mtune_flag_list "i80321-400-b0")
  elseif(TARGET_ARCHITECTURE STREQUAL "i80321-600-b0")
    list(APPEND _mtune_flag_list "i80321-600-b0")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa250c")
    list(APPEND _mtune_flag_list "pxa250c")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa210c")
    list(APPEND _mtune_flag_list "pxa210c")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa27x")
    list(APPEND _mtune_flag_list "pxa27x")
  elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-533")
    list(APPEND _mtune_flag_list "ipx425-533")
  elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-400")
    list(APPEND _mtune_flag_list "ipx425-400")
  elseif(TARGET_ARCHITECTURE STREQUAL "ipx425-266")
    list(APPEND _mtune_flag_list "ipx425-266")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa32x")
    list(APPEND _mtune_flag_list "pxa32x")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa930")
    list(APPEND _mtune_flag_list "pxa930")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa30x")
    list(APPEND _mtune_flag_list "pxa30x")
  elseif(TARGET_ARCHITECTURE STREQUAL "pxa31x")
    list(APPEND _mtune_flag_list "pxa31x")
  elseif(TARGET_ARCHITECTURE STREQUAL "sa1110")
    list(APPEND _mtune_flag_list "sa1110")
  elseif(TARGET_ARCHITECTURE STREQUAL "ipx1200")
    list(APPEND _mtune_flag_list "ipx1200")

  # Apple
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a6")
    list(APPEND _mtune_flag_list "apple-a6")
    list(APPEND _march_flag_list "armv7-a")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a7")
    list(APPEND _mtune_flag_list "apple-a7")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crypto" "fp" "neon" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a8")
    list(APPEND _mtune_flag_list "apple-a8")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crypto" "fp" "neon" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a9")
    list(APPEND _mtune_flag_list "apple-a9")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crypto" "fp" "neon" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a10")
    list(APPEND _mtune_flag_list "apple-a10")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crc" "crypto" "fp" "neon" "rdm" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a11")
    list(APPEND _mtune_flag_list "apple-a11")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crc" "crypto" "fp" "lse" "neon" "ras" "rdm" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a12")
    list(APPEND _mtune_flag_list "apple-a12")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crc" "crypto" "fp" "fp16" "lse" "neon" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-a13")
    list(APPEND _mtune_flag_list "apple-a13")
    list(APPEND _march_flag_list "armv8.4-a")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crc" "crypto" "dotprod" "fp" "fp16" "fp16fml" "lse" "neon" "ras" "rcpc" "rdm" "sha2" "sha3" "sm4" "zcm" "zcz")
  elseif(TARGET_ARCHITECTURE STREQUAL "apple-m1")
    list(APPEND _mtune_flag_list "vortex")
    list(APPEND _march_flag_list "armv8.3-a")
    list(APPEND _march_flag_list "armv8.2-a")
    list(APPEND _march_flag_list "armv8.1-a")
    list(APPEND _march_flag_list "armv8-a")
    list(APPEND _available_vector_units_list "aes" "crc" "crypto" "fp" "fp16" "lse" "neon" "ras" "rcpc" "rdm" "sha2" "zcm" "zcz")

  # Others
  elseif(TARGET_ARCHITECTURE STREQUAL "generic")
    list(APPEND _march_flag_list "generic")
  elseif(TARGET_ARCHITECTURE STREQUAL "native")
    list(APPEND _march_flag_list "native")
  elseif(TARGET_ARCHITECTURE STREQUAL "none")
    # add this clause to remove it from the else clause

  else()
    message(FATAL_ERROR "Unknown target architecture: \"${TARGET_ARCHITECTURE}\". Please set TARGET_ARCHITECTURE to a supported value.")
  endif()

  # Special treatment for "native"
  if(TARGET_ARCHITECTURE STREQUAL "native")
    if(MSVC)
      # MSVC (on Windows)
      message(FATAL_ERROR, "MSVC does not support \"native\" flag.")
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC"
        OR CMAKE_CXX_COMPILER_ID MATCHES "PGI")
      # NVidia HPC / PGI (on Linux/Windows
      AddCompilerFlag("-tp=native" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")
      # Cray (on Linux)
      message(FATAL_ERROR, "Cray compiler does not support \"native\" flag.")
    else()
      # Others: GNU, Clang and variants
      AddCompilerFlag("-mcpu=native" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
    endif()
    
  # Apply architecture flags
  elseif(NOT TARGET_ARCHITECTURE STREQUAL "none")

    # Disable "broken" features based on OFA_xxx_INTRINSICS_BROKEN options
    set(_disable_vector_unit_list)
    set(_enable_vector_unit_list)
    
    # TODO: Add OFA_xxx_INTRINSICS_BROKEN rules
    set(_aes_broken false)
    set(_bf16_broken false)
    set(_crc_broken false)
    set(_crypto_broken false)
    set(_dotprod_broken false)
    set(_dsp_broken false)
    set(_fp16_broken false)
    set(_fp16fml_broken false)
    set(_fp_broken false)
    set(_fp_dp_broken false)
    set(_fp_sp_broken false)
    set(_i8mm_broken false)
    set(_idiv_broken false)
    set(_lse_broken false)
    set(_mve_broken false)
    set(_mve_fp_broken false)
    set(_neon_broken false)
    set(_neon_fp16_broken false)
    set(_neon_vfpv4_broken false)
    set(_ras_broken false)
    set(_rcpc_broken false)
    set(_rdm_broken false)
    set(_rdma_broken false)
    set(_sec_broken false)
    set(_sha2_broken false)
    set(_sha3_broken false)
    set(_simd_broken false)
    set(_sm4_broken false)
    set(_sve_broken false)
    set(_vfpv3_broken false)
    set(_vfpv3_d16_broken false)
    set(_vfpv3_d16_fp16_broken false)
    set(_vfpv3_fp16_broken false)
    set(_vfpv4_broken false)
    set(_vfpv4_d16_broken false)
    set(_zcm_broken false)
    set(_zcz_broken false)

    # Enable/disable macro
    macro(_enable_or_disable _name _flag _documentation _broken)
      if(_broken)
        set(_found false)
      else()
        _ofa_find(_available_vector_units_list "${_flag}" _found)
      endif()
      set(USE_${_name} ${_found} CACHE BOOL "${documentation}" ${_force})
      mark_as_advanced(USE_${_name})
      if(USE_${_name})
        list(APPEND _enable_vector_unit_list "${_flag}")
      else()
        list(APPEND _disable_vector_unit_list "${_flag}")
      endif()
    endmacro()
    
    # Enable/disable features
    _enable_or_disable(AES "aes" "Use AES. This will enable the aes and pmull crypto extension." _aes_broken)
    _enable_or_disable(BF16 "bf16" "Use BF16. This will enable the brain half-precision floating-point instructions." _bf16_broken)
    _enable_or_disable(CRC "crc" "Use CRC. This will enable the Cyclic Redundancy Check (CRC) instructions." _crc_broken)
    _enable_or_disable(CRYPTO "crypto" "Use CRYPTO. This will enable the cryptographic instructions." _crypto_broken)
    _enable_or_disable(DOTPROD "dotprod" "Use DOTPROD. This will enable the Dot Product extension. This also enables Advanced SIMD instructions." _dotprod_broken)
    _enable_or_disable(DSP "dsp" "Use DSP. This will enable the DSP instruction." _dsp_broken)
    _enable_or_disable(FP "fp" "Use FP. This will enable the floating-point data processing instructions." _fp_broken)
    _enable_or_disable(FP16 "fp16" "Use FP16. This will enable the half-precision floating-point data processing instructions." _fp16_broken)
    _enable_or_disable(FP16FML "fp16fml" "Use FP16FML. This will enable the FP16 fmla extension." _fp16fml_broken)
    _enable_or_disable(FP_DP "fp.dp" "Use FP.DP. This will enable the single- and double-precision floating-point instructions." _fp_dp_broken)
    _enable_or_disable(FP_SP "fp.sp" "Use FP.SP. This will enable the single-precision floating-point instructions." _fp_sp_broken)
    _enable_or_disable(I8MM "i8mm" "Use I8MM. This will enable the 8-bit Integer Matrix Multiply instructions." _i8mm_broken)
    _enable_or_disable(IDIV "idiv" "Use IDIV. This will enable the ARM-state integer division instructions." _idiv_broken)
    _enable_or_disable(LSE "lse" "Use LSE. This will enable the Large System Extension instructions." _lse_broken)
    _enable_or_disable(MVE "mve" "Use MVE. This will enable the M-Profile Vector Extension (MVE) integer instructions." _mve_broken)
    _enable_or_disable(MVE_FP "mve.fp" "Use MVE.FP. This will enable the M-Profile Vector Extension (MVE) integer and single precision floating-point instructions." _mve_fp_broken)
    _enable_or_disable(NEON "neon" "Use NEON. This will enable the Advanced SIMD (Neon) v1." _neon_broken)
    _enable_or_disable(NEON_FP16 "neon-fp16" "Use NEON-FP16. This will enable the Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions, with the half-precision floating-point conversion operations." _neon_fp16_broken)
    _enable_or_disable(NEON_VFPV4 "neon-vfpv4" "Use NEON-VFPV4. This will enable the Advanced SIMD (Neon) v2 and the VFPv4 floating-point instructions." _neon_vfpv4_broken)
    _enable_or_disable(RAS "ras" "Use RAS. This will enable the Reliability, Availability, and Serviceability extension." _ras_broken)
    _enable_or_disable(RCPC "rcpc" "Use RCPC. This will enable the RcPc extension." _rcpc_broken)
    _enable_or_disable(RDM "rdm" "Use RDM. This will enable the RDM extension." _rdm_broken)
    _enable_or_disable(RDMA "rdma" "Use RDMA. This will enable the Round Double Multiply Accumulate instructions." _rdma_broken)
    _enable_or_disable(SEC "sec" "Use SEC. This will enable the security extension." _sec_broken)
    _enable_or_disable(SHA2 "sha2" "Use SHA2. This will enable the sha2 crypto extension." _sha2_broken)
    _enable_or_disable(SHA3 "sha3" "Use SHA3. This will enable the sha512 and sha3 crypto extension." _sha3_broken)
    _enable_or_disable(SIMD "simd" "Use SIMD. This will enable the Advanced SIMD (Neon) v1 and the VFPv3 floating-point instructions." _simd_broken)
    _enable_or_disable(SM4 "sm4" "Use SM4. This will enable the the sm3 and sm4 crypto extension." _sm4_broken)
    _enable_or_disable(SVE "sve" "Use SVE. This will enable the Scalable Vector Extension instructions." _sve_broken)
    _enable_or_disable(VFPV3 "vfpv3" "Use VPFV3. This will enable the VFPv3 floating-point instructions, with 32 double-precision registers." _vfpv3_broken)
    _enable_or_disable(VFPV3_D16 "vfpv3-d16" "Use VPFV3-16. This will enable the VFPv3 floating-point instructions, with 32 double-precision registers and the half-precision floating-point conversion operations." _vfpv3_d16_broken)
    _enable_or_disable(VFPV3_D16_FP16 "vfpv3-d16-fp16" "Use VPFV3-D16-FP16. This will enable VFPv3 floating-point instructions, with 16 double-precision registers and the half-precision floating-point conversion operations." _vfpv3_d16_fp16_broken)
    _enable_or_disable(VFPV3_FP16 "vfpv3-fp16" "Use VPFV3-FP16. This will enable the VFPv3 floating-point instructions, with 32 double-precision registers and the half-precision floating-point conversion operations." _vfpv3_fp16_broken)
    _enable_or_disable(VFPV4 "vfpv4" "Use VPFV4. This will enable the VFPv4 floating-point instructions, with 32 double-precision registers." _vfpv4_broken)
    _enable_or_disable(VFPV4_D16 "vfpv4-d16" "Use VPFV4-D16. This will enable the VFPv4 floating-point instructions, with 16 double-precision registers." _vfpv4_dp16_broken)
    _enable_or_disable(ZCM "zcm" "Use ZCM. This will enable the ZCM extension." _zcm_broken)
    _enable_or_disable(ZCZ "zcz" "Use ZCZ. This will enable the ZCZ extension." _zcz_broken)
        
    # Add compiler flags
    if(MSVC AND MSVC_VERSION GREATER 1900)
      _ofa_find(_enable_vector_unit_list "vfpv4" _found)
      if(_found)
        AddCompilerFlag("/arch:VFPv4" CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _found)
      endif()
      if(NOT _found)
        _ofa_find(_enable_vector_unit_list "simd" _found)
        if(_found)
          AddCompilerFlag("/arch:ARMv7VE" CXX_FLAGS OFA_ARCHITECTURE_FLAGS CXX_RESULT _found)
        endif()
      endif()
      foreach(_flag ${_enable_vector_unit_list})
        string(TOUPPER "${_flag}" _flag)
        string(REPLACE "." "_" _flag "__${_flag}__")
        add_definitions("-D${_flag}")
      endforeach(_flag)
      
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Cray")
      
      # TODO: Add Cray flags
      
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Fujitsu")
      
      # TODO: Add Fujitsu flags
      
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "NVHPC")
      
      # TODO: Add NVHPC flags
      
    else()
      # Others: GNU, Clang and variants

      # Following the recommendation from
      # https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/compiler-flags-across-architectures-march-mtune-and-mcpu
      # we first try to only use the -mcpu flag. If that fails, e.g., if
      # the compiler does not yet support the specified target, we try to
      # set the -march and -mtune flags as fallback option.
      foreach(_flag ${_mtune_flag_list})
        AddCompilerFlag("-mcpu=${_flag}" CXX_RESULT _good CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
        if(_good)
          break()
        endif(_good)
      endforeach(_flag)

      # Fallback: set -march, -mtune flags
      if(NOT _good)
        # Set -march flag
        foreach(_march ${_march_flag_list})          
          AddCompilerFlag("-march=${_march}" CXX_RESULT _good CXX_FLAGS DUMMY_FLAGS)
          if(_good)
            set(_march_plus_extensions "${_march}")
            foreach(_flag ${_enable_vector_unit_list})
              AddCompilerFlag("-march=${_march_plus_extensions}+${_flag}" CXX_RESULT _good CXX_FLAGS DUMMY_FLAGS)
              if(_good)
                set(_march_plus_extensions "${_march_plus_extensions}+${_flag}")
              endif(_good)
            endforeach(_flag)
            AddCompilerFlag("-march=${_march_plus_extensions}" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
            break()
          endif(_good)
        endforeach(_march)

        # Set -mtune flag
        foreach(_mtune ${_mtune_flag_list})
          AddCompilerFlag("-mtune=${_mtune}" CXX_RESULT _good CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
          if(_good)
            break()
          endif(_good)
        endforeach(_mtune)
      endif(NOT _good)

      # Note that ARM does not support -mfeature and -mno-feature to
      # enable and disable specific features. Hence, there are no
      # loops over the _enable_vector_unit_list and
      # _disable_vector_unit_list lists here(!)
    endif()
  endif()

  # Compile code with profiling instrumentation
  if(TARGET_PROFILER STREQUAL "gprof")
    AddCompilerFlag("-pg" CXX_FLAGS OFA_ARCHITECTURE_FLAGS)
  endif()
endmacro(OFA_HandleArmOptions)
